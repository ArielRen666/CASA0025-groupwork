# CASA00025 Group Project - Poyang Lake Water Body Monitoring

## Project Summary

### Problem Statement

Influenced by monsoon rainfall and the hydrology of the Yangtze River, Poyang Lake, the largest freshwater lake and the second largest lake in China, exhibits significant seasonal water level fluctuations. Its water level even rise and fall up to more than ten metres in a few months, affecting millions of people. It is also internationally recognised as an important wetland, the home of many endangered species. Thus, against this backdrop, our application is dedicated to monitoring and managing the dynamics of Poyang Lake, which is vital to people around it, ecological conservation, disaster management and understanding environmental change.

### End User

- **Local Residents and Businesses:** Provides a transparent and intuitive platform for those reliant on the lake for irrigation, fishing, and water resources, directly impacting their economic stability and quality of life.
   
- **Students and the Public:** Serves as an educational tool to increase public awareness and interest in environmental issues. It uses interactive methods to inspire participation in lake conservation and the rational use of water resources.
   
- **Environmental Advocates:** Offers water level data to help monitor biodiversity, particularly endangered species, and assess the health of the ecosystem.
   
- **Policy Makers and Planners:** Supports development of informed policies on water management and environmental protection, ensuring decisions are data-driven.


### Data

-   Sentinel-1 satellite images of the Poyang Lake region from December 1, 2015 to November 30, 2021

-   Data division: Spring: March-May; Summer: June-August; Autumn: September-November; Winter: December-February (next year).

-   Multiview processed Sentinel IW GRD class imagery. Radar image is imaged in IW mode with VV polarization.

-   Reasons:

1.  Sentienl-1's SAR data are not constrained by weather, cloud cover, etc.
2.  SAR data has been identified for frequent monitoring of surface water.
3.  SAR specular reflectivity separates open water from land surface.
4.  Poyang Lake wet season: June-August, normal water season: April, May and September, dry season: October-February of the next year (Yao, et al., 2021).

### Methodology

-   Screening, cropping, smoothing preprocessing of Sentinel-1 radar image.

-   Optimal thresholds were obtained using histograms generated from VV polarization data and calling otsu functions.

-   Mark pixels smaller than the threshold as bodies of water. Make non-water bodies be considered transparent.

-   Calculate sum of the number of times a water body is present at each pixel point.

-   Total number of occurrences of water bodies / Total number of images = Frequency of occurrence of water bodies per pixel point. The frequency is filtered to be higher than a set threshold, thus showing areas of frequent water bodies.

### Interface

Our application's interface meets user needs by providing interactive tools to visualise and analyze water body changes in Poyang Lake. Users can toggle between different map layers, such as a Sentinel-1 radar composite and a water frequency map that shows the frequency of water occurrence during the monitoring period. The "Water Body Area" feature allows users to generate charts and interact with them to observe changes over time, with clickable points that update the map with corresponding images and water mask classifications. The interface also supports time-lapse GIFs, enabling users to select custom date ranges for analyzing temporal changes.

## The Application

To view full earth engine code, please [click here](https://code.earthengine.google.com/3c6566fca3ee7b4d6dd7e55791d222f0).

::: column-page
<iframe src="https://ee-dengwx25.projects.earthengine.app/view/water-body-monitoring" width="100%" height="700px">

</iframe>
:::

## How it Works

### 3.1 Pre-processing

Define the extent of the study area, import and preprocess the Sentinel-1 satellite images, filter to obtain images with a specific polarization mode (VV polarization mode), mode of operation (interleaved observation mode), orbital attributes (ascending and intersecting orbits), the study area, and the time of day, and perform smoothing.

``` js
// Define the geographic extent of the Poyang Lake
var poyangLake = ee.Geometry.Polygon([
   [[115.82,29.40],[116.77,29.40],[116.77,28.35],[115.82,28.35]]
]);

// Add a Lake District Scope
var aoi = poyangLake
Map.centerObject(aoi);

// Importing Sentinel One data and filtering it
var s1 =  ee.ImageCollection('COPERNICUS/S1_GRD')
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
.filter(ee.Filter.eq('instrumentMode', 'IW'))
.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))
.filterBounds(aoi)
.filterDate('2015-12-01','2021-12-01')
.filter(ee.Filter.contains({leftField: ".geo", rightValue: aoi})) // The filter section contains images of the study area
.map(function(image){return image.clip(Map.getBounds(true))})

// Smooth
.map(function(image){return image.addBands(image.select('VV').focal_median(parseFloat('50'),'circle','meters').rename('VV_smoothed'))}); 
print(s1);
```

### 3.2 Water Extraction

The histograms of the VV bands in the Sentinel-1 radar images were calculated, and the optimal thresholds calculated using the OTSU algorithm were used to create water body masks and calculate the frequency of occurrence of water bodies.

``` js
// Extraction of water bodies by binarization of Sentinel One data using the OSTU approach
var otsu = function(histogram) {
  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));
  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));
  var size = means.length().get([0]);
  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);
  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);
  var mean = sum.divide(total);
  var indices = ee.List.sequence(1, size);
  var bss = indices.map(function(i) {
    var aCounts = counts.slice(0, 0, i);
    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);
    var aMeans = means.slice(0, 0, i);
    var aMean = aMeans.multiply(aCounts)
        .reduce(ee.Reducer.sum(), [0]).get([0])
        .divide(aCount);
    var bCount = total.subtract(aCount);
    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);
    return aCount.multiply(aMean.subtract(mean).pow(2)).add(
           bCount.multiply(bMean.subtract(mean).pow(2)));
  });
  return means.sort(bss).get([-1]);
};

// Add a water body mask as a band to S1
var add_waterMask = function(image){
  // Calculation of histograms
  var histogram = image.select('VV').reduceRegion({
    reducer: ee.Reducer.histogram(255, 2)
      .combine('mean', null, true)
      .combine('variance', null, true), 
    geometry: aoi, 
    scale: 10,
    bestEffort: true
  });
  // Threshold via the OSTU algorithm
  var threshold = otsu(histogram.get('VV_histogram'));
  
  // Acquisition of water body masks
  var waterMask = image.select('VV_smoothed').lt(threshold).rename('waterMask');
  waterMask = waterMask.updateMask(waterMask); 
  return image.addBands(waterMask);
};
s1 = s1.map(add_waterMask);

// Calculate the frequency of occurrence of water bodies during the experiment
var min_occurence = 10;
var water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());
var water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);
var water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));
```

### 3.3 User Interface

#### 3.3.1 Control Panel

Generate a water body frequency map and legend based on the calculated frequency of occurrence of water bodies and add them to the map.

``` js
// Add study area Sentinel One median composites, water body frequency maps, and GIF maps
// Calculate the frequency of occurrence of water bodies during the experiment
var min_occurence = 10;
var water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());
var water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);
var water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));

// Add Ribbon
function ColorBar(palette) {
  return ui.Thumbnail({
    image: ee.Image.pixelLonLat().select(0),
    params: {
      bbox: [0, 0, 1, 0.1],
      dimensions: '300x15',
      format: 'png',
      min: 0,
      max: 1,
      palette: palette,
    },
    style: {stretch: 'horizontal', margin: '0px 22px'},
  });
}
function makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {
  var  labelheader = ui.Label('Water occurrence during investigation period',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});
  var labelLines = ui.Panel(
      [
        ui.Label(lowLine, {margin: '-4px 21px'}),
        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highLine, {margin: '-4px 21px'})
],
      ui.Panel.Layout.flow('horizontal'));
      var labelPanel = ui.Panel(
      [
        ui.Label(lowText, {margin: '0px 14.5px'}),
        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),
        ui.Label(highText, {margin: '0px 1px'})
],
      ui.Panel.Layout.flow('horizontal'));
    return ui.Panel({
      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], 
      style: {position:'bottom-right'}});
}

// Add study area Sentinel One median composites, waterbody frequency maps, and color bands
Map.add(makeLegend('|', '|', '|', "0 %", '50 %', '100%', ['orange','yellow','lightblue','darkblue']))
Map.addLayer(water_frequency_masked,{min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'Percentage of annual water occurence');
```

Create the user interface panel and place it in the upper left corner of the map.

``` js
// Defining the main panel
var controlPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical'),
  style: {
    position: 'top-left',
    padding: '8px 15px',
    width: '400px',
    height: '100%',
  }
});
```

Create a function called `displayLayers` that manages the display of layers on the map.

``` js
// First define a function to manage the layer display
function displayLayers(layerToShow) {
  // Remove all layers
  Map.layers().reset();
  
  // Determine which layers to display based on the incoming parameters
  if (layerToShow === 'frequency') {
    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');
  } else if (layerToShow === 's1') {
    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');
  } else if (layerToShow === 'mask') {
    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');
    Map.addLayer(water_mask_layer, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water Mask');
  }
}
```

Initializes the map page and determines which layers will be displayed based on parameters.

``` js
// Initialization page, showing only the water body frequency layer
displayLayers('frequency');

// Updating the layer display on the map
function updateLayerVisibility(showS1, showFrequency) {
  Map.layers().reset(); // First clear all layers

  // Whether or not to display the S1 layer depends on the status of the checkbox.
  if (showS1) {
    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');
  }

  // Whether or not to display the water body frequency layer is determined by the status of the checkboxes
  if (showFrequency) {
    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');
  }
}
```

#### 3.3.2 The First Function: Layer Options

Create buttons to control the display of layers, clicking on S1 Image will display the Sentinel-1 image layer, clicking on Water Frequency will display the water body frequency layer.

``` js
// Layer options button functionality
var layerOptionsButton = ui.Button({
  label: 'Layer Options',
  style: {
    fontSize: '16px',
    padding: '10px',
    margin: '10px auto',
    width: '100%', 
    stretch: 'horizontal'
  },
  onClick: function() {
    controlPanel.clear();
    var optionsTitle = ui.Label('Layer Options', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});
    var optionsDescription = ui.Label('This interface allows you to customize the content of the layers displayed on the map. The following are the types of layers you can choose to display:', {fontSize: '13px', textAlign: 'center'});

    // Checkbox for S1 Image layer
    var s1Checkbox = ui.Checkbox({
      label: 'S1 Image',
      value: false,
      style: {
         fontWeight: 'bold'
      },
      onChange: function(value) {
        updateLayerVisibility(value, waterFreqCheckbox.getValue());
      }
    });
    
    var s1image = ui.Label('shuoming', {
      whiteSpace: 'wrap'
    });
    
    // Checkbox for Water Frequency layer
    var waterFreqCheckbox = ui.Checkbox({
      label: 'Water Frequency',
      value: false,
      style: {
         fontWeight: 'bold'
      },
      onChange: function(value) {
        updateLayerVisibility(s1Checkbox.getValue(), value);
      }
    });
    
    var waterfre = ui.Label('The ‘Water Frequency’ layer Shows the frequency of occurrence of waterbodies during the monitoring period. This layer uses different colors to show the proportion of waterbodies occurring during the study time, helping to identify and monitor seasonal changes or long-term trends in waterbodies.', {
      whiteSpace: 'wrap'
    });

    controlPanel.add(optionsTitle);
    controlPanel.add(optionsDescription);
    controlPanel.add(s1Checkbox);
    controlPanel.add(s1image);
    controlPanel.add(waterFreqCheckbox);
    controlPanel.add(waterfre);
    controlPanel.add(homeButton);
  }
});

// Add the layerOptionsButton to the main control panel.
controlPanel.add(layerOptionsButton);
```
![Layer Options](images/222.png)

#### 3.3.3 The Second Function: Time-Lapse GIFs
Next, we create date slider, animated GIFs, defined the date range for the GIFs, and filtered the satellite data, setting parameters for the GIFs, to generate a dynamic GIF displayed on the user interface. This allows for the observation of water body changes over a period of time.


``` js
// Initialize the date slider
var gifDateSlider = ui.DateSlider({
  start: '2015-12-01',
  end: '2021-12-01',
  value: ['2015-12-01', '2021-12-01'],
  period: 365,
  onChange: updateGIF,
  style: { width: "95%" }
});

// Define functions for updating GIFs
function updateGIF() {
  var range = ee.DateRange(ee.Date(gifDateSlider.getValue()[0]), ee.Date(gifDateSlider.getValue()[1]));
  var s1Filtered = s1.filterDate(range.start(), range.end()).filterBounds(aoi);
  var s1WithWaterMask = s1Filtered.map(add_waterMask);
  var gifParams = {
    bands: ["VV", "VV", "VV"],
    region: aoi,
    dimensions: 600,
    framesPerSecond: 3,
    min: -20,
    max: 0,
    startDate: range.start().format('YYYY-MM-dd'),
    endDate: range.end().format('YYYY-MM-dd')
  };
  var gifAnimation = ui.Thumbnail({
    image: s1WithWaterMask,
    params: gifParams,
    style: {
      position: 'bottom-center',
      maxHeight: '250px',
      margin: '0 auto',
    }
  });
```

To manage and display the GIF animations, it is essential first to ensure that new GIFs are generated based on the selected time range. 

``` js
  //  Updating GIF animations with a fixed index
  if (controlPanel.widgets().length() > 3) {
    // Make sure the GIF animation is always in the fourth position
    controlPanel.widgets().set(3, gifAnimation);
  } else {
     // If there are not already four controls, insert
     controlPanel.widgets().insert(3, gifAnimation); 
  }
}

function showGIFPanel() {
  controlPanel.clear();

  var gifTitle = ui.Label('Time-Lapse GIFs', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});
  var gifDescription = ui.Label('GIF animations are created by extracting a series of images from the Sentinel-1 dataset within a chosen date range and arranging them chronologically. Use the date slider below to analyze a specific year and generate a GIF image of Poyang Lake showing the changes in the water body.', {fontSize: '13px', textAlign: 'left'});

  controlPanel.add(gifTitle);
  controlPanel.add(gifDescription);
  controlPanel.add(gifDateSlider);
  // Call the update function directly to load the initial GIF.
  updateGIF();  
  // Ensure that the homeButton is always added last
  controlPanel.add(homeButton);  
}
```

![Time-Lapse GIFs](images/333.png)

#### 3.3.4 The Third Function: Water Body Area

Then, We've crafted the `updateWaterDataAndChart` function to set up a user interface panel dedicated to displaying water body areas. Just click on the data points of the chart triggers the map to display the corresponding satellite image and water mask for the chosen date.

``` js
var waterMaskDateSlider = ui.DateSlider({
  start: '2015-12-01',
  end: '2021-12-01',
  value: ['2015-12-01', '2021-12-01'],
  period: 90,
  onChange: updateWaterDataAndChart,
  style: { width: "95%" }
});

// Define functions for updating water body mask data and graphs
function updateWaterDataAndChart() {
  var range = ee.DateRange(ee.Date(waterMaskDateSlider.getValue()[0]), ee.Date(waterMaskDateSlider.getValue()[1]));
  var filteredCollection = s1.filterDate(range.start(), range.end()).filterBounds(aoi);
  var waterAreaSeries = filteredCollection.map(add_waterMask)
      .select('waterMask')
      .reduce(ee.Reducer.sum());
  var waterAreaChart = ui.Chart.image.seriesByRegion({
    imageCollection: filteredCollection.select('waterMask'),
    regions: aoi,
    reducer: ee.Reducer.sum(),
    scale: 100,
    xProperty: 'system:time_start',
    seriesProperty: 'label'
  }).setOptions({
    title: 'Area of the identified water mask',
    hAxis: {title: 'Date'},
    vAxis: {title: 'Area (sq km)'},
    lineWidth: 1,
    pointSize: 3
  });

  // Use a fixed index to update the water body area charts
  if (controlPanel.widgets().length() > 3) {
    controlPanel.widgets().set(3, waterAreaChart);
  } else {
    controlPanel.widgets().insert(3, waterAreaChart);  
  }

  //  Bind click events to line charts
  waterAreaChart.onClick(function(xValue, yValue, seriesName) {
    if (!xValue) return;
    var equalDate = ee.Filter.equals('system:time_start', xValue);
    var filteredImage = s1.filter(equalDate).first();
    var classification = filteredImage.clip(aoi).select('waterMask');
    var date_string = new Date(xValue).toLocaleString('de-DE', {dateStyle: 'full', timeStyle: 'short' });
    var visParams = {
      bands: ['VV'],
      max: 0,
      min: -20
    };

    Map.layers().reset();
    Map.addLayer(filteredImage, visParams, 'S1-Image [' + date_string + ']');
    Map.addLayer(classification, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water mask [' + date_string + ']');
  });
}
```

The following code clears the existing panel, adds a title, a description, and a date slider for selecting quarters, then updates and displays the water body area chart for Poyang Lake.

``` js
function showWaterMaskPanel() {
  controlPanel.clear();

  var maskTitle = ui.Label('Water Body Area', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});
  var maskDescription = ui.Label('Use the date slider below to analyze a given quarter. Click on the graph to show the water body area for a given day in Poyang Lake. ', {fontSize: '13px', textAlign: 'left'});

  controlPanel.add(maskTitle);
  controlPanel.add(maskDescription);
  controlPanel.add(waterMaskDateSlider);
  updateWaterDataAndChart();
  controlPanel.add(homeButton);
}
```

![Water Body Area](images/444.png)

#### 3.3.5 Configure the Main Panel
Finally, we configure the main panel, which includes title labels, introductions, and buttons for generating GIFs and analyzing water body areas. This setup ensures that users can dynamically explore satellite imagery, water occurrence frequency, and specific analyses through custom-designed date sliders and refresh the display to access relevant data layers or interactive animations.

``` js
// Define a label to serve as the main title of the app interface
var title = ui.Label({
  value: 'Poyang Lake Water Body Monitoring',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0', // Define margins around the label
    padding: '0'
  }
});

// Create introductory label with wrapped text
var intro1 = ui.Label('This tool analyzes water body changes in Poyang Lake using Sentinel-1 Synthetic Aperture Radar imagery. It displays the frequency of water occurrence during investigation period. It also features interactive tools to generate time-lapse GIFs and analyze changes in water body area over time.', {
  whiteSpace: 'wrap'
});

var intro2 = ui.Label('To compare radar images and the frequency of water occurrence, click the button below:', {
  whiteSpace: 'wrap'
});

var intro3 = ui.Label('To explore the temporal changes in the water body, click the button below:', {
  whiteSpace: 'wrap'
});

var intro4 = ui.Label('To learn about changes in water body area, click the button below:', {
  whiteSpace: 'wrap'
});

// Home Page Button Configuration
var homeButton = ui.Button({
  style: {stretch: 'horizontal'},
  label: 'Home',
  onClick: function() {
    home();
  }
});

// Home Panel Configuration Functions
var home = function() {
  Map.setCenter(116.32, 28.89, 9);
  Map.setOptions("Hybrid");
  controlPanel.clear();
  controlPanel.add(title);
  controlPanel.add(intro1);
  controlPanel.add(intro2);
  controlPanel.add(layerOptionsButton); 
  controlPanel.add(intro3);
  controlPanel.add(gifButton); 
  controlPanel.add(intro4);
  controlPanel.add(analyzeButton); 
  // When return to the home page, show only the water body frequency layer.
  displayLayers('frequency');  
};

// Define GIF button and its function
var gifButton = ui.Button({
  label: 'Time-Lapse GIFs',
  style: {
    fontSize: '16px',
    padding: '10px',
    margin: '10px auto',
    width: '100%', 
    stretch: 'horizontal'
  },
  onClick: function() {
    controlPanel.clear();
    var gifTitle = ui.Label('GIF', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});
    var gifDescription = ui.Label('Select a date range to generate an animated GIF of the region.', {fontSize: '13px', textAlign: 'center'});
    controlPanel.add(gifTitle);
    controlPanel.add(gifDescription);
    controlPanel.add(gifDateSlider);
    // Call a function to update a GIF based on the selected date range
    updateGIF();  
    controlPanel.add(homeButton);
  }
});

// Define analyse water masks button
var analyzeButton = ui.Button({
  label: 'Water Body Area',
  style: {
    fontSize: '16px',
    padding: '10px',
    margin: '10px auto',
    width: '100%', 
    stretch: 'horizontal'
  },
  onClick: function() {
    controlPanel.clear();
    var chartTitle = ui.Label('Area of the identified water mask', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});
    var chartDescription = ui.Label('Select a date range to generate a water body mask for the area.', {fontSize: '13px', textAlign: 'center'});
    controlPanel.add(chartTitle);
    controlPanel.add(chartDescription);
    // Add date slider for selecting analysis date range
    controlPanel.add(waterMaskDateSlider); 
    // Call function to update water body mask data and graphs
    updateWaterDataAndChart();  
    controlPanel.add(homeButton);
  }
});


// Set GIF and water mask button click handlers to their respective panel showing functions
gifButton.onClick(showGIFPanel);
analyzeButton.onClick(showWaterMaskPanel);

// Set the home button click handler to the home function
homeButton.onClick(home);

// Add the control panel to the map and show the home interface
Map.add(controlPanel);
home();
```
## Reference
Yao, J. P., Yang, L. K., Chen, T. and Song, C. Q. (2021) ‘Consecutive Monitoring of the Poyang Lake Wetland by Integrating Sentinel-2 with Sentinel-1 and Landsat 8 Data’, Remote Sensing Technology and Application, 36(4), pp. 760-776.

