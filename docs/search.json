[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA00025 Group Project - AquaTrend Mapper",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nWhat is the problem you’re trying to address using this application?\nInfluenced by monsoon rainfall and the hydrology of the Yangtze River (the longest river in Asia and the third longest in the world), Poyang Lake, China’s largest freshwater lake, exhibits significant seasonal water level fluctuations. Our application is dedicated to monitoring and managing the dynamics of Poyang Lake, the largest freshwater lake in China. Understanding the seasonal fluctuations in water levels driven by monsoon rainfall and the interactions with the Yangtze River is crucial for ecological conservation, disaster management, and understanding environmental changes.\n\n\n\nWho are you building this application for? How does it address a need this community has?\n\nPolicy makers. The application provides policy makers with a real-time water body change monitoring tool for Poyang Lake, which helps policy makers to develop and optimize water management measures.\nResearchers. The application supports their research in the field of water resources management and environmental change by providing tools for water body extraction and time series analysis in Poyang Lake.\nPublic. The application provides a transparent and intuitive platform for the public to understand the real-time situation and change trends of Poyang Lake through visualization of data and charts, and to raise the public’s attention to environmental issues.\n\n\n\n\nWhat data are you using?\nTime: December 1, 2015 to November 31, 2021 Location: Poyang Lake Area Sentinel-1 satellite imagery: Multiview processed Sentinel IW GRD class imagery. The radar image is imaged in IW mode with VV polarization.\nReasons: 1. Sentienl-1’s SAR data are not constrained by weather, cloud cover, etc. 2. SAR data has been identified for frequent monitoring of surface water 3. SAR specular reflectivity separates open water from land surface\nData division: Spring: March-May; Summer: June-August; Autumn: September-November; Winter: December-February (next year). Because, Poyang Lake wet season: June-August, normal water season: April, May and September, dry season: October-February of the next year (Yao, et al., 2021).\n\n\n\nHow are you using this data to address the problem?\n\nScreening, cropping, smoothing preprocessing of Sentinel-1 radar image.\nOptimal thresholds were obtained using histograms generated from VV polarization data and calling otsu functions.\nMark pixels smaller than the threshold as bodies of water. Make non-water bodies be considered transparent.\nCalculate sum of the number of times a water body is present at each pixel point.\nTotal number of occurrences of water bodies / Total number of images = Frequency of occurrence of water bodies per pixel point. The frequency is filtered to be higher than a set threshold, thus showing areas of frequent water bodies.\n\n\n\n\nHow does your application’s interface work to address the needs of your end user?\n\n\n\n\nReplace the link below with the link to your application.\n\n\n\n\n\n\n\nUse this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\n\n\nDefine the extent of the study area, import and preprocess Sentinel-1 satellite images, and use filters to select images with specific polarization modes (VV polarization modes), modes of operation (interleaved observation modes), and orbital attributes (ascending intersecting orbits).\n// Defining the geographic extent of the  Poyang Lake\nvar poyangLakeJiujiang = ee.Geometry.Polygon([\n   [[115.82,29.40],[116.77,29.40],[116.77,28.35],[115.82,28.35]]\n]);\n\n// Adding a Lake District Scope\nvar aoi = poyangLakeJiujiang\nMap.centerObject(aoi);\n// Importing Sentinel One data and filtering it\nvar s1 =  ee.ImageCollection('COPERNICUS/S1_GRD')\n.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n.filter(ee.Filter.eq('instrumentMode', 'IW'))\n.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))\nCropping of remote sensing satellite images for specific study areas and times.\n.filter(ee.Filter.contains({leftField: \".geo\", rightValue: aoi})) // The filter section contains images of the study area\n.map(function(image){return image.clip(Map.getBounds(true))})\nApply median filtering to smooth the VV band in the original image and add the smoothed band to the current image.\n.map(function(image){return image.addBands(image.select('VV').focal_median(parseFloat('50'),'circle','meters').rename('VV_smoothed'))}); // smoothing\nprint(s1);\n\n\n\nSeparate water body information from other surface features in the Sentinel-1 data by calculating an optimal threshold using the Otsu binarized image algorithm.\n// Extraction of water bodies by binarization of Sentinel One data using the OSTU approach\nvar otsu = function(histogram) {\n  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));\n  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));\n  var size = means.length().get([0]);\n  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);\n  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);\n  var mean = sum.divide(total);\n  var indices = ee.List.sequence(1, size);\n  var bss = indices.map(function(i) {\n    var aCounts = counts.slice(0, 0, i);\n    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);\n    var aMeans = means.slice(0, 0, i);\n    var aMean = aMeans.multiply(aCounts)\n        .reduce(ee.Reducer.sum(), [0]).get([0])\n        .divide(aCount);\n    var bCount = total.subtract(aCount);\n    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);\n    return aCount.multiply(aMean.subtract(mean).pow(2)).add(\n           bCount.multiply(bMean.subtract(mean).pow(2)));\n  });\n  return means.sort(bss).get([-1]);\n};\nThe histograms of the VV polarization bands in the images were calculated, and then the Otsu algorithm was used to calculate the optimal threshold to which the smoothed VV bands of the images were compared to generate the water body masks.\n// Adding a water body mask as a band to S1\nvar add_waterMask = function(image){\n  // Calculation of histograms\n  var histogram = image.select('VV').reduceRegion({\n    reducer: ee.Reducer.histogram(255, 2)\n      .combine('mean', null, true)\n      .combine('variance', null, true), \n    geometry: aoi, \n    scale: 10,\n    bestEffort: true\n  });\n  // Thresholding via the OSTU algorithm\n  var threshold = otsu(histogram.get('VV_histogram'));\n  // Acquisition of water body masks\n  var waterMask = image.select('VV_smoothed').lt(threshold).rename('waterMask');\n  waterMask = waterMask.updateMask(waterMask); \n  return image.addBands(waterMask);\n};\ns1 = s1.map(add_waterMask);\nThe frequency of water body occurrences was calculated by summing the total number of image elements of the water body mask in each image and dividing by the total number of water body mask images in the image collection.\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n\n\n\nGenerate a water body frequency map and legend based on the calculated frequency of occurrence of water bodies and add them to the map.\n// Add study area Sentinel One median composites, water body frequency maps, and GIF maps\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n// Add Ribbon\nfunction ColorBar(palette) {\n  return ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0),\n    params: {\n      bbox: [0, 0, 1, 0.1],\n      dimensions: '300x15',\n      format: 'png',\n      min: 0,\n      max: 1,\n      palette: palette,\n    },\n    style: {stretch: 'horizontal', margin: '0px 22px'},\n  });\n}\nfunction makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {\n  var  labelheader = ui.Label('Water occurrence during investigation period',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});\n  var labelLines = ui.Panel(\n      [\n        ui.Label(lowLine, {margin: '-4px 21px'}),\n        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highLine, {margin: '-4px 21px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n      var labelPanel = ui.Panel(\n      [\n        ui.Label(lowText, {margin: '0px 14.5px'}),\n        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highText, {margin: '0px 1px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n    return ui.Panel({\n      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], \n      style: {position:'bottom-right'}});\n}\n\n\n// Add study area Sentinel One median composites, waterbody frequency maps, and color bands\nMap.add(makeLegend('|', '|', '|', \"0 %\", '50 %', '100%', ['orange','yellow','lightblue','darkblue']))\nMap.addLayer(water_frequency_masked,{min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'Percentage of annual water occurence');\nCreate the user interface panel and place it in the upper left corner of the map.\n// Defining the main panel\nvar controlPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position: 'top-left',\n    padding: '8px 15px',\n    width: '400px',\n    height: '100%',\n  }\n});\nCreate a function called displayLayers that manages the display of layers on the map.\n// First define a function to manage the layer display\nfunction displayLayers(layerToShow) {\n  // Remove all layers\n  Map.layers().reset();\n  \n  // Determine which layers to display based on the incoming parameters\n  if (layerToShow === 'frequency') {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  } else if (layerToShow === 's1') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  } else if (layerToShow === 'mask') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n    Map.addLayer(water_mask_layer, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water Mask');\n  }\n}\nInitializes the map page and determines which layers will be displayed based on parameters.\n// Initialization page, showing only the water body frequency layer\ndisplayLayers('frequency');\n\n// Updating the layer display on the map\nfunction updateLayerVisibility(showS1, showFrequency) {\n  Map.layers().reset(); // First clear all layers\n\n  // Whether or not to display the S1 layer depends on the status of the checkbox.\n  if (showS1) {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  }\n\n  // Whether or not to display the water body frequency layer is determined by the status of the checkboxes\n  if (showFrequency) {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  }\n}\nCreate buttons to control the display of layers, clicking on S1 Image will display the Sentinel-1 image layer, clicking on Water Frequency will display the water body frequency layer.\n// Layer options button functionality\nvar layerOptionsButton = ui.Button({\n  label: 'Layer Options',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var optionsTitle = ui.Label('Layer Options', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var optionsDescription = ui.Label('Select the layers you want to display.', {fontSize: '13px', textAlign: 'center'});\n\n    // Checkbox for S1 Image layer\n    var s1Checkbox = ui.Checkbox({\n      label: 'S1 Image',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(value, waterFreqCheckbox.getValue());\n      }\n    });\n    \n    var s1image = ui.Label('shuoming', {\n      whiteSpace: 'wrap'\n    });\n    \n    // Checkbox for Water Frequency layer\n    var waterFreqCheckbox = ui.Checkbox({\n      label: 'Water Frequency',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(s1Checkbox.getValue(), value);\n      }\n    });\n    \n    var waterfre = ui.Label('shuoming', {\n      whiteSpace: 'wrap'\n    });\n\n    controlPanel.add(optionsTitle);\n    controlPanel.add(optionsDescription);\n    controlPanel.add(s1Checkbox);\n    controlPanel.add(s1image);\n    controlPanel.add(waterFreqCheckbox);\n    controlPanel.add(waterfre);\n    controlPanel.add(homeButton);\n  }\n});\nNext, we create two date sliders. In the second GIF interface, the slider’s date range is set from December 1, 2015, to December 1, 2021. For the third interface, the updateWaterDataAndChart slider’s date range spans from December 1, 2019, to December 31, 2021.\n// Initialize the date slider\nvar gifDateSlider = ui.DateSlider({\n  start: '2015-12-01',\n  end: '2021-12-01',\n  value: ['2015-12-01', '2021-12-01'],\n  period: 365,\n  onChange: updateGIF,\n  style: { width: \"95%\" }\n});\n\nvar waterMaskDateSlider = ui.DateSlider({\n  start: '2019-01-01',\n  end: '2021-12-01',\n  value: ['2019-01-01', '2021-12-31'],\n  period: 90,\n  onChange: updateWaterDataAndChart,\n  style: { width: \"95%\" }\n});\nSubsequently, we created animated GIFs, defined the date range for the GIFs, and filtered the satellite data, setting parameters for the GIFs (including size, among others), to generate a dynamic GIF displayed on the user interface. This allows for the observation of water body changes over a period of time.\n// Define functions for updating GIFs\nfunction updateGIF() {\n  var range = ee.DateRange(ee.Date(gifDateSlider.getValue()[0]), ee.Date(gifDateSlider.getValue()[1]));\n  var s1Filtered = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var s1WithWaterMask = s1Filtered.map(add_waterMask);\n  var gifParams = {\n    bands: [\"VV\", \"VV\", \"VV\"],\n    region: aoi,\n    dimensions: 600,\n    framesPerSecond: 3,\n    min: -20,\n    max: 0,\n    startDate: range.start().format('YYYY-MM-dd'),\n    endDate: range.end().format('YYYY-MM-dd')\n  };\n  var gifAnimation = ui.Thumbnail({\n    image: s1WithWaterMask,\n    params: gifParams,\n    style: {\n      position: 'bottom-center',\n      maxHeight: '250px',\n      margin: '0 auto',\n    }\n  });\nTo manage and display the GIF animations, it is essential first to ensure that new GIFs are generated based on the selected time range. Additionally, the order of elements in the GIF interface must be correct: the slider indicating the date range appears first, followed by the display of the GIF animation, and finally, the home button.\n  //  Updating GIF animations with a fixed index\n  if (controlPanel.widgets().length() &gt; 3) {\n    controlPanel.widgets().set(3, gifAnimation);  // Make sure the GIF animation is always in the fourth position\n  } else {\n    controlPanel.widgets().insert(3, gifAnimation);  // If there are not already four controls, insert\n  }\n}\n\nfunction showGIFPanel() {\n  controlPanel.clear();\n\n  var gifTitle = ui.Label('Time-Lapse GIFs', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var gifDescription = ui.Label('GIF animations are created by extracting a series of images from the Sentinel-1 dataset within a chosen date range and arranging them chronologically. Use the date slider below to analyze a specific year and generate a GIF image of Poyang Lake showing the changes in the water body.', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(gifTitle);\n  controlPanel.add(gifDescription);\n  controlPanel.add(gifDateSlider);\n\n  updateGIF();  // Call the update function directly to load the initial GIF.\n\n  controlPanel.add(homeButton);  // Ensure that the homeButton is always added last\n}\n这里放一个第二界面的图片\nYou might think that analyzing satellite imagery to monitor the extent of water bodies requires complex procedures, but in fact, our approach is clear and straightforward. We’ve crafted the updateWaterDataAndChart function to sets up a user interface panel dedicated to displaying water body areas. Just click on the data points of the chart triggers the map to display the corresponding satellite image and water mask for the chosen date.\n// Define functions for updating water body mask data and graphs\nfunction updateWaterDataAndChart() {\n  var range = ee.DateRange(ee.Date(waterMaskDateSlider.getValue()[0]), ee.Date(waterMaskDateSlider.getValue()[1]));\n  var filteredCollection = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var waterAreaSeries = filteredCollection.map(add_waterMask)\n      .select('waterMask')\n      .reduce(ee.Reducer.sum());\n  var waterAreaChart = ui.Chart.image.seriesByRegion({\n    imageCollection: filteredCollection.select('waterMask'),\n    regions: aoi,\n    reducer: ee.Reducer.sum(),\n    scale: 100,\n    xProperty: 'system:time_start',\n    seriesProperty: 'label'\n  }).setOptions({\n    title: 'Area of the identified water mask',\n    hAxis: {title: 'Date'},\n    vAxis: {title: 'Area (sq km)'},\n    lineWidth: 1,\n    pointSize: 3\n  });\n\n  // Use a fixed index to update the water body area charts\n  if (controlPanel.widgets().length() &gt; 3) {\n    controlPanel.widgets().set(3, waterAreaChart);  // Make sure the water body area chart is always in the fourth position\n  } else {\n    controlPanel.widgets().insert(3, waterAreaChart);  // If there are not already four controls, insert\n  }\n\n  //  Bind click events to line charts\n  waterAreaChart.onClick(function(xValue, yValue, seriesName) {\n    if (!xValue) return;\n    var equalDate = ee.Filter.equals('system:time_start', xValue);\n    var filteredImage = s1.filter(equalDate).first();\n    var classification = filteredImage.clip(aoi).select('waterMask');\n    var date_string = new Date(xValue).toLocaleString('de-DE', {dateStyle: 'full', timeStyle: 'short' });\n    var visParams = {\n      bands: ['VV'],\n      max: 0,\n      min: -20\n    };\n\n    Map.layers().reset();\n    Map.addLayer(filteredImage, visParams, 'S1-Image [' + date_string + ']');\n    Map.addLayer(classification, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water mask [' + date_string + ']');\n  });\n}\nThe following code clears the existing panel, adds a title, a description, and a date slider for selecting quarters, then updates and displays the water body area chart for Poyang Lake. Finally, it ensures that the home button is added last for navigation consistency.\nfunction showWaterMaskPanel() {\n  controlPanel.clear();\n\n  var maskTitle = ui.Label('Water Body Area', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var maskDescription = ui.Label('Use the date slider below to analyze a given quarter. Click on the graph to show the water body area for a given day in Poyang Lake. ', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(maskTitle);\n  controlPanel.add(maskDescription);\n  controlPanel.add(waterMaskDateSlider);\n\n  updateWaterDataAndChart();  // Direct call to the update function to load the initial water body area map\n\n  controlPanel.add(homeButton);  // Ensure that the homeButton is always added last\n}\nFinally, we configure the main panel, which includes title labels, introductions, and buttons for generating GIFs and analyzing water body areas. This setup ensures that users can dynamically explore satellite imagery, water occurrence frequency, and specific analyses through custom-designed date sliders and refresh the display to access relevant data layers or interactive animations.\n// Define a label to serve as the main title of the app interface\nvar title = ui.Label({\n  value: 'Poyang Lake Water Body Monitoring',\n  style: {\n    fontWeight: 'bold',\n    fontSize: '18px',\n    margin: '0 0 4px 0', // Define margins around the label\n    padding: '0'\n  }\n});\n\n// Create introductory label with wrapped text\nvar intro1 = ui.Label('This tool analyzes water body changes in Poyang Lake using Sentinel-1 Synthetic Aperture Radar imagery. It displays the frequency of water occurrence during investigation period. It also features interactive tools to generate time-lapse GIFs and analyze changes in water body area over time.', {\n  whiteSpace: 'wrap'\n});\n\nvar intro2 = ui.Label('To compare radar images and the frequency of water occurrence, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro3 = ui.Label('To explore the temporal changes in the water body, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro4 = ui.Label('To learn about changes in water body area, click the button below:', {\n  whiteSpace: 'wrap'\n});\n// Home Page Button Configuration\nvar homeButton = ui.Button({\n  style: {stretch: 'horizontal'},\n  label: 'Home',\n  onClick: function() {\n    home();\n  }\n});\n\n// Home Panel Configuration Functions\nvar home = function() {\n  Map.setCenter(116.32, 28.89, 9);\n  Map.setOptions(\"Hybrid\");\n  controlPanel.clear();\n  controlPanel.add(title);\n  controlPanel.add(intro1); // Add introductory text\n  controlPanel.add(intro2);\n  controlPanel.add(layerOptionsButton); // Add new button\n  controlPanel.add(intro3);\n  controlPanel.add(gifButton); // Add GIF generation button\n  controlPanel.add(intro4);\n  controlPanel.add(analyzeButton); // Add water mask analysis button\n  displayLayers('frequency');  // When return to the home page, show only the water body frequency layer.\n};\n\n// Define GIF button and its function\nvar gifButton = ui.Button({\n  label: 'Time-Lapse GIFs',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var gifTitle = ui.Label('GIF', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var gifDescription = ui.Label('Select a date range to generate an animated GIF of the region.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(gifTitle);\n    controlPanel.add(gifDescription);\n    controlPanel.add(gifDateSlider);\n    updateGIF();  // Call a function to update a GIF based on the selected date range\n    controlPanel.add(homeButton);\n  }\n});\n\n// Define analyse water masks button\nvar analyzeButton = ui.Button({\n  label: 'Water Body Area',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var chartTitle = ui.Label('Area of the identified water mask', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var chartDescription = ui.Label('Select a date range to generate a water body mask for the area.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(chartTitle);\n    controlPanel.add(chartDescription);\n    controlPanel.add(waterMaskDateSlider); // Add date slider for selecting analysis date range\n    updateWaterDataAndChart();  // Call function to update water body mask data and graphs\n    controlPanel.add(homeButton);\n  }\n});\n\n\n// Set GIF and water mask button click handlers to their respective panel showing functions\ngifButton.onClick(showGIFPanel);\nanalyzeButton.onClick(showWaterMaskPanel);\n// Set the home button click handler to the home function\nhomeButton.onClick(home);\n\n// Add the control panel to the map and show the home interface\nMap.add(controlPanel);\nhome();  //// Initialise and display the main interface\nYou can include images:\n\n\n\nPixelwise T-Test, 2018\n\n\nand math: \\[ \\Large t = {\\frac{\\overline{x_1}-\\overline{x_2}} {\\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}}} \\]"
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CASA00025 Group Project - AquaTrend Mapper",
    "section": "",
    "text": "Fill in the sections below to provide a brief summary of your project. Each section should have no more than 100 words. Do not edit any of the headings.\n\n\nWhat is the problem you’re trying to address using this application?\nInfluenced by monsoon rainfall and the hydrology of the Yangtze River (the longest river in Asia and the third longest in the world), Poyang Lake, China’s largest freshwater lake, exhibits significant seasonal water level fluctuations. Our application is dedicated to monitoring and managing the dynamics of Poyang Lake, the largest freshwater lake in China. Understanding the seasonal fluctuations in water levels driven by monsoon rainfall and the interactions with the Yangtze River is crucial for ecological conservation, disaster management, and understanding environmental changes.\n\n\n\nWho are you building this application for? How does it address a need this community has?\n\nPolicy makers. The application provides policy makers with a real-time water body change monitoring tool for Poyang Lake, which helps policy makers to develop and optimize water management measures.\nResearchers. The application supports their research in the field of water resources management and environmental change by providing tools for water body extraction and time series analysis in Poyang Lake.\nPublic. The application provides a transparent and intuitive platform for the public to understand the real-time situation and change trends of Poyang Lake through visualization of data and charts, and to raise the public’s attention to environmental issues.\n\n\n\n\nWhat data are you using?\nTime: December 1, 2015 to November 31, 2021 Location: Poyang Lake Area Sentinel-1 satellite imagery: Multiview processed Sentinel IW GRD class imagery. The radar image is imaged in IW mode with VV polarization.\nReasons: 1. Sentienl-1’s SAR data are not constrained by weather, cloud cover, etc. 2. SAR data has been identified for frequent monitoring of surface water 3. SAR specular reflectivity separates open water from land surface\nData division: Spring: March-May; Summer: June-August; Autumn: September-November; Winter: December-February (next year). Because, Poyang Lake wet season: June-August, normal water season: April, May and September, dry season: October-February of the next year (Yao, et al., 2021).\n\n\n\nHow are you using this data to address the problem?\n\nScreening, cropping, smoothing preprocessing of Sentinel-1 radar image.\nOptimal thresholds were obtained using histograms generated from VV polarization data and calling otsu functions.\nMark pixels smaller than the threshold as bodies of water. Make non-water bodies be considered transparent.\nCalculate sum of the number of times a water body is present at each pixel point.\nTotal number of occurrences of water bodies / Total number of images = Frequency of occurrence of water bodies per pixel point. The frequency is filtered to be higher than a set threshold, thus showing areas of frequent water bodies.\n\n\n\n\nHow does your application’s interface work to address the needs of your end user?"
  },
  {
    "objectID": "index.html#the-application",
    "href": "index.html#the-application",
    "title": "CASA00025 Group Project - AquaTrend Mapper",
    "section": "",
    "text": "Replace the link below with the link to your application."
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CASA00025 Group Project - AquaTrend Mapper",
    "section": "",
    "text": "Use this section to explain how your application works using code blocks and text explanations (no more than 500 words excluding code):\n\n\nDefine the extent of the study area, import and preprocess Sentinel-1 satellite images, and use filters to select images with specific polarization modes (VV polarization modes), modes of operation (interleaved observation modes), and orbital attributes (ascending intersecting orbits).\n// Defining the geographic extent of the  Poyang Lake\nvar poyangLakeJiujiang = ee.Geometry.Polygon([\n   [[115.82,29.40],[116.77,29.40],[116.77,28.35],[115.82,28.35]]\n]);\n\n// Adding a Lake District Scope\nvar aoi = poyangLakeJiujiang\nMap.centerObject(aoi);\n// Importing Sentinel One data and filtering it\nvar s1 =  ee.ImageCollection('COPERNICUS/S1_GRD')\n.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n.filter(ee.Filter.eq('instrumentMode', 'IW'))\n.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))\nCropping of remote sensing satellite images for specific study areas and times.\n.filter(ee.Filter.contains({leftField: \".geo\", rightValue: aoi})) // The filter section contains images of the study area\n.map(function(image){return image.clip(Map.getBounds(true))})\nApply median filtering to smooth the VV band in the original image and add the smoothed band to the current image.\n.map(function(image){return image.addBands(image.select('VV').focal_median(parseFloat('50'),'circle','meters').rename('VV_smoothed'))}); // smoothing\nprint(s1);\n\n\n\nSeparate water body information from other surface features in the Sentinel-1 data by calculating an optimal threshold using the Otsu binarized image algorithm.\n// Extraction of water bodies by binarization of Sentinel One data using the OSTU approach\nvar otsu = function(histogram) {\n  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));\n  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));\n  var size = means.length().get([0]);\n  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);\n  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);\n  var mean = sum.divide(total);\n  var indices = ee.List.sequence(1, size);\n  var bss = indices.map(function(i) {\n    var aCounts = counts.slice(0, 0, i);\n    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);\n    var aMeans = means.slice(0, 0, i);\n    var aMean = aMeans.multiply(aCounts)\n        .reduce(ee.Reducer.sum(), [0]).get([0])\n        .divide(aCount);\n    var bCount = total.subtract(aCount);\n    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);\n    return aCount.multiply(aMean.subtract(mean).pow(2)).add(\n           bCount.multiply(bMean.subtract(mean).pow(2)));\n  });\n  return means.sort(bss).get([-1]);\n};\nThe histograms of the VV polarization bands in the images were calculated, and then the Otsu algorithm was used to calculate the optimal threshold to which the smoothed VV bands of the images were compared to generate the water body masks.\n// Adding a water body mask as a band to S1\nvar add_waterMask = function(image){\n  // Calculation of histograms\n  var histogram = image.select('VV').reduceRegion({\n    reducer: ee.Reducer.histogram(255, 2)\n      .combine('mean', null, true)\n      .combine('variance', null, true), \n    geometry: aoi, \n    scale: 10,\n    bestEffort: true\n  });\n  // Thresholding via the OSTU algorithm\n  var threshold = otsu(histogram.get('VV_histogram'));\n  // Acquisition of water body masks\n  var waterMask = image.select('VV_smoothed').lt(threshold).rename('waterMask');\n  waterMask = waterMask.updateMask(waterMask); \n  return image.addBands(waterMask);\n};\ns1 = s1.map(add_waterMask);\nThe frequency of water body occurrences was calculated by summing the total number of image elements of the water body mask in each image and dividing by the total number of water body mask images in the image collection.\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n\n\n\nGenerate a water body frequency map and legend based on the calculated frequency of occurrence of water bodies and add them to the map.\n// Add study area Sentinel One median composites, water body frequency maps, and GIF maps\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n// Add Ribbon\nfunction ColorBar(palette) {\n  return ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0),\n    params: {\n      bbox: [0, 0, 1, 0.1],\n      dimensions: '300x15',\n      format: 'png',\n      min: 0,\n      max: 1,\n      palette: palette,\n    },\n    style: {stretch: 'horizontal', margin: '0px 22px'},\n  });\n}\nfunction makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {\n  var  labelheader = ui.Label('Water occurrence during investigation period',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});\n  var labelLines = ui.Panel(\n      [\n        ui.Label(lowLine, {margin: '-4px 21px'}),\n        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highLine, {margin: '-4px 21px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n      var labelPanel = ui.Panel(\n      [\n        ui.Label(lowText, {margin: '0px 14.5px'}),\n        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highText, {margin: '0px 1px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n    return ui.Panel({\n      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], \n      style: {position:'bottom-right'}});\n}\n\n\n// Add study area Sentinel One median composites, waterbody frequency maps, and color bands\nMap.add(makeLegend('|', '|', '|', \"0 %\", '50 %', '100%', ['orange','yellow','lightblue','darkblue']))\nMap.addLayer(water_frequency_masked,{min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'Percentage of annual water occurence');\nCreate the user interface panel and place it in the upper left corner of the map.\n// Defining the main panel\nvar controlPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position: 'top-left',\n    padding: '8px 15px',\n    width: '400px',\n    height: '100%',\n  }\n});\nCreate a function called displayLayers that manages the display of layers on the map.\n// First define a function to manage the layer display\nfunction displayLayers(layerToShow) {\n  // Remove all layers\n  Map.layers().reset();\n  \n  // Determine which layers to display based on the incoming parameters\n  if (layerToShow === 'frequency') {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  } else if (layerToShow === 's1') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  } else if (layerToShow === 'mask') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n    Map.addLayer(water_mask_layer, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water Mask');\n  }\n}\nInitializes the map page and determines which layers will be displayed based on parameters.\n// Initialization page, showing only the water body frequency layer\ndisplayLayers('frequency');\n\n// Updating the layer display on the map\nfunction updateLayerVisibility(showS1, showFrequency) {\n  Map.layers().reset(); // First clear all layers\n\n  // Whether or not to display the S1 layer depends on the status of the checkbox.\n  if (showS1) {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  }\n\n  // Whether or not to display the water body frequency layer is determined by the status of the checkboxes\n  if (showFrequency) {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  }\n}\nCreate buttons to control the display of layers, clicking on S1 Image will display the Sentinel-1 image layer, clicking on Water Frequency will display the water body frequency layer.\n// Layer options button functionality\nvar layerOptionsButton = ui.Button({\n  label: 'Layer Options',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var optionsTitle = ui.Label('Layer Options', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var optionsDescription = ui.Label('Select the layers you want to display.', {fontSize: '13px', textAlign: 'center'});\n\n    // Checkbox for S1 Image layer\n    var s1Checkbox = ui.Checkbox({\n      label: 'S1 Image',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(value, waterFreqCheckbox.getValue());\n      }\n    });\n    \n    var s1image = ui.Label('shuoming', {\n      whiteSpace: 'wrap'\n    });\n    \n    // Checkbox for Water Frequency layer\n    var waterFreqCheckbox = ui.Checkbox({\n      label: 'Water Frequency',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(s1Checkbox.getValue(), value);\n      }\n    });\n    \n    var waterfre = ui.Label('shuoming', {\n      whiteSpace: 'wrap'\n    });\n\n    controlPanel.add(optionsTitle);\n    controlPanel.add(optionsDescription);\n    controlPanel.add(s1Checkbox);\n    controlPanel.add(s1image);\n    controlPanel.add(waterFreqCheckbox);\n    controlPanel.add(waterfre);\n    controlPanel.add(homeButton);\n  }\n});\nNext, we create two date sliders. In the second GIF interface, the slider’s date range is set from December 1, 2015, to December 1, 2021. For the third interface, the updateWaterDataAndChart slider’s date range spans from December 1, 2019, to December 31, 2021.\n// Initialize the date slider\nvar gifDateSlider = ui.DateSlider({\n  start: '2015-12-01',\n  end: '2021-12-01',\n  value: ['2015-12-01', '2021-12-01'],\n  period: 365,\n  onChange: updateGIF,\n  style: { width: \"95%\" }\n});\n\nvar waterMaskDateSlider = ui.DateSlider({\n  start: '2019-01-01',\n  end: '2021-12-01',\n  value: ['2019-01-01', '2021-12-31'],\n  period: 90,\n  onChange: updateWaterDataAndChart,\n  style: { width: \"95%\" }\n});\nSubsequently, we created animated GIFs, defined the date range for the GIFs, and filtered the satellite data, setting parameters for the GIFs (including size, among others), to generate a dynamic GIF displayed on the user interface. This allows for the observation of water body changes over a period of time.\n// Define functions for updating GIFs\nfunction updateGIF() {\n  var range = ee.DateRange(ee.Date(gifDateSlider.getValue()[0]), ee.Date(gifDateSlider.getValue()[1]));\n  var s1Filtered = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var s1WithWaterMask = s1Filtered.map(add_waterMask);\n  var gifParams = {\n    bands: [\"VV\", \"VV\", \"VV\"],\n    region: aoi,\n    dimensions: 600,\n    framesPerSecond: 3,\n    min: -20,\n    max: 0,\n    startDate: range.start().format('YYYY-MM-dd'),\n    endDate: range.end().format('YYYY-MM-dd')\n  };\n  var gifAnimation = ui.Thumbnail({\n    image: s1WithWaterMask,\n    params: gifParams,\n    style: {\n      position: 'bottom-center',\n      maxHeight: '250px',\n      margin: '0 auto',\n    }\n  });\nTo manage and display the GIF animations, it is essential first to ensure that new GIFs are generated based on the selected time range. Additionally, the order of elements in the GIF interface must be correct: the slider indicating the date range appears first, followed by the display of the GIF animation, and finally, the home button.\n  //  Updating GIF animations with a fixed index\n  if (controlPanel.widgets().length() &gt; 3) {\n    controlPanel.widgets().set(3, gifAnimation);  // Make sure the GIF animation is always in the fourth position\n  } else {\n    controlPanel.widgets().insert(3, gifAnimation);  // If there are not already four controls, insert\n  }\n}\n\nfunction showGIFPanel() {\n  controlPanel.clear();\n\n  var gifTitle = ui.Label('Time-Lapse GIFs', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var gifDescription = ui.Label('GIF animations are created by extracting a series of images from the Sentinel-1 dataset within a chosen date range and arranging them chronologically. Use the date slider below to analyze a specific year and generate a GIF image of Poyang Lake showing the changes in the water body.', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(gifTitle);\n  controlPanel.add(gifDescription);\n  controlPanel.add(gifDateSlider);\n\n  updateGIF();  // Call the update function directly to load the initial GIF.\n\n  controlPanel.add(homeButton);  // Ensure that the homeButton is always added last\n}\n这里放一个第二界面的图片\nYou might think that analyzing satellite imagery to monitor the extent of water bodies requires complex procedures, but in fact, our approach is clear and straightforward. We’ve crafted the updateWaterDataAndChart function to sets up a user interface panel dedicated to displaying water body areas. Just click on the data points of the chart triggers the map to display the corresponding satellite image and water mask for the chosen date.\n// Define functions for updating water body mask data and graphs\nfunction updateWaterDataAndChart() {\n  var range = ee.DateRange(ee.Date(waterMaskDateSlider.getValue()[0]), ee.Date(waterMaskDateSlider.getValue()[1]));\n  var filteredCollection = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var waterAreaSeries = filteredCollection.map(add_waterMask)\n      .select('waterMask')\n      .reduce(ee.Reducer.sum());\n  var waterAreaChart = ui.Chart.image.seriesByRegion({\n    imageCollection: filteredCollection.select('waterMask'),\n    regions: aoi,\n    reducer: ee.Reducer.sum(),\n    scale: 100,\n    xProperty: 'system:time_start',\n    seriesProperty: 'label'\n  }).setOptions({\n    title: 'Area of the identified water mask',\n    hAxis: {title: 'Date'},\n    vAxis: {title: 'Area (sq km)'},\n    lineWidth: 1,\n    pointSize: 3\n  });\n\n  // Use a fixed index to update the water body area charts\n  if (controlPanel.widgets().length() &gt; 3) {\n    controlPanel.widgets().set(3, waterAreaChart);  // Make sure the water body area chart is always in the fourth position\n  } else {\n    controlPanel.widgets().insert(3, waterAreaChart);  // If there are not already four controls, insert\n  }\n\n  //  Bind click events to line charts\n  waterAreaChart.onClick(function(xValue, yValue, seriesName) {\n    if (!xValue) return;\n    var equalDate = ee.Filter.equals('system:time_start', xValue);\n    var filteredImage = s1.filter(equalDate).first();\n    var classification = filteredImage.clip(aoi).select('waterMask');\n    var date_string = new Date(xValue).toLocaleString('de-DE', {dateStyle: 'full', timeStyle: 'short' });\n    var visParams = {\n      bands: ['VV'],\n      max: 0,\n      min: -20\n    };\n\n    Map.layers().reset();\n    Map.addLayer(filteredImage, visParams, 'S1-Image [' + date_string + ']');\n    Map.addLayer(classification, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water mask [' + date_string + ']');\n  });\n}\nThe following code clears the existing panel, adds a title, a description, and a date slider for selecting quarters, then updates and displays the water body area chart for Poyang Lake. Finally, it ensures that the home button is added last for navigation consistency.\nfunction showWaterMaskPanel() {\n  controlPanel.clear();\n\n  var maskTitle = ui.Label('Water Body Area', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var maskDescription = ui.Label('Use the date slider below to analyze a given quarter. Click on the graph to show the water body area for a given day in Poyang Lake. ', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(maskTitle);\n  controlPanel.add(maskDescription);\n  controlPanel.add(waterMaskDateSlider);\n\n  updateWaterDataAndChart();  // Direct call to the update function to load the initial water body area map\n\n  controlPanel.add(homeButton);  // Ensure that the homeButton is always added last\n}\nFinally, we configure the main panel, which includes title labels, introductions, and buttons for generating GIFs and analyzing water body areas. This setup ensures that users can dynamically explore satellite imagery, water occurrence frequency, and specific analyses through custom-designed date sliders and refresh the display to access relevant data layers or interactive animations.\n// Define a label to serve as the main title of the app interface\nvar title = ui.Label({\n  value: 'Poyang Lake Water Body Monitoring',\n  style: {\n    fontWeight: 'bold',\n    fontSize: '18px',\n    margin: '0 0 4px 0', // Define margins around the label\n    padding: '0'\n  }\n});\n\n// Create introductory label with wrapped text\nvar intro1 = ui.Label('This tool analyzes water body changes in Poyang Lake using Sentinel-1 Synthetic Aperture Radar imagery. It displays the frequency of water occurrence during investigation period. It also features interactive tools to generate time-lapse GIFs and analyze changes in water body area over time.', {\n  whiteSpace: 'wrap'\n});\n\nvar intro2 = ui.Label('To compare radar images and the frequency of water occurrence, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro3 = ui.Label('To explore the temporal changes in the water body, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro4 = ui.Label('To learn about changes in water body area, click the button below:', {\n  whiteSpace: 'wrap'\n});\n// Home Page Button Configuration\nvar homeButton = ui.Button({\n  style: {stretch: 'horizontal'},\n  label: 'Home',\n  onClick: function() {\n    home();\n  }\n});\n\n// Home Panel Configuration Functions\nvar home = function() {\n  Map.setCenter(116.32, 28.89, 9);\n  Map.setOptions(\"Hybrid\");\n  controlPanel.clear();\n  controlPanel.add(title);\n  controlPanel.add(intro1); // Add introductory text\n  controlPanel.add(intro2);\n  controlPanel.add(layerOptionsButton); // Add new button\n  controlPanel.add(intro3);\n  controlPanel.add(gifButton); // Add GIF generation button\n  controlPanel.add(intro4);\n  controlPanel.add(analyzeButton); // Add water mask analysis button\n  displayLayers('frequency');  // When return to the home page, show only the water body frequency layer.\n};\n\n// Define GIF button and its function\nvar gifButton = ui.Button({\n  label: 'Time-Lapse GIFs',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var gifTitle = ui.Label('GIF', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var gifDescription = ui.Label('Select a date range to generate an animated GIF of the region.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(gifTitle);\n    controlPanel.add(gifDescription);\n    controlPanel.add(gifDateSlider);\n    updateGIF();  // Call a function to update a GIF based on the selected date range\n    controlPanel.add(homeButton);\n  }\n});\n\n// Define analyse water masks button\nvar analyzeButton = ui.Button({\n  label: 'Water Body Area',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var chartTitle = ui.Label('Area of the identified water mask', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var chartDescription = ui.Label('Select a date range to generate a water body mask for the area.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(chartTitle);\n    controlPanel.add(chartDescription);\n    controlPanel.add(waterMaskDateSlider); // Add date slider for selecting analysis date range\n    updateWaterDataAndChart();  // Call function to update water body mask data and graphs\n    controlPanel.add(homeButton);\n  }\n});\n\n\n// Set GIF and water mask button click handlers to their respective panel showing functions\ngifButton.onClick(showGIFPanel);\nanalyzeButton.onClick(showWaterMaskPanel);\n// Set the home button click handler to the home function\nhomeButton.onClick(home);\n\n// Add the control panel to the map and show the home interface\nMap.add(controlPanel);\nhome();  //// Initialise and display the main interface\nYou can include images:\n\n\n\nPixelwise T-Test, 2018\n\n\nand math: \\[ \\Large t = {\\frac{\\overline{x_1}-\\overline{x_2}} {\\sqrt{\\frac{s^2_1}{n_1} + \\frac{s^2_2}{n_2}}}} \\]"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://{your_username}.github.io/{your_repo_name}"
  }
]