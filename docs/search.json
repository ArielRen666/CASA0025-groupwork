[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CASA00025 Group Project - Poyang Lake Water Body Monitoring",
    "section": "",
    "text": "Influenced by monsoon rainfall and the hydrology of the Yangtze River, Poyang Lake, the largest freshwater lake and the second largest lake in China, exhibits significant seasonal water level fluctuations. Its water level even rise and fall up to more than ten metres in a few months, affecting millions of people. It is also internationally recognised as an important wetland, the home of many endangered species. Thus, against this backdrop, our application is dedicated to monitoring and managing the dynamics of Poyang Lake, which is vital to people around it, ecological conservation, disaster management and understanding environmental change.\n\n\n\n\nLocal Residents and Businesses: Provides a transparent and intuitive platform for those reliant on the lake for irrigation, fishing, and water resources, directly impacting their economic stability and quality of life.\nStudents and the Public: Serves as an educational tool to increase public awareness and interest in environmental issues. It uses interactive methods to inspire participation in lake conservation and the rational use of water resources.\nEnvironmental Advocates: Offers water level data to help monitor biodiversity, particularly endangered species, and assess the health of the ecosystem.\nPolicy Makers and Planners: Supports development of informed policies on water management and environmental protection, ensuring decisions are data-driven.\n\n\n\n\n\nSentinel-1 satellite images of the Poyang Lake region from December 1, 2015 to November 30, 2021\nData division: Spring: March-May; Summer: June-August; Autumn: September-November; Winter: December-February (next year).\nMultiview processed Sentinel IW GRD class imagery. Radar image is imaged in IW mode with VV polarization.\nReasons:\n\n\nSentienl-1’s SAR data are not constrained by weather, cloud cover, etc.\nSAR data has been identified for frequent monitoring of surface water.\nSAR specular reflectivity separates open water from land surface.\nPoyang Lake wet season: June-August, normal water season: April, May and September, dry season: October-February of the next year (Yao, et al., 2021).\n\n\n\n\n\nScreening, cropping, smoothing preprocessing of Sentinel-1 radar image.\nOptimal thresholds were obtained using histograms generated from VV polarization data and calling otsu functions.\nMark pixels smaller than the threshold as bodies of water. Make non-water bodies be considered transparent.\nCalculate sum of the number of times a water body is present at each pixel point.\nTotal number of occurrences of water bodies / Total number of images = Frequency of occurrence of water bodies per pixel point. The frequency is filtered to be higher than a set threshold, thus showing areas of frequent water bodies.\n\n\n\n\nOur application’s interface meets user needs by providing interactive tools to visualise and analyze water body changes in Poyang Lake. Users can toggle between different map layers, such as a Sentinel-1 radar composite and a water frequency map that shows the frequency of water occurrence during the monitoring period. The “Water Body Area” feature allows users to generate charts and interact with them to observe changes over time, with clickable points that update the map with corresponding images and water mask classifications. The interface also supports time-lapse GIFs, enabling users to select custom date ranges for analyzing temporal changes.\n\n\n\n\nTo view full earth engine code, please click here.\n\n\n\n\n\n\n\n\n\nDefine the extent of the study area, import and preprocess the Sentinel-1 satellite images, filter to obtain images with a specific polarization mode (VV polarization mode), mode of operation (interleaved observation mode), orbital attributes (ascending and intersecting orbits), the study area, and the time of day, and perform smoothing.\n// Define the geographic extent of the Poyang Lake\nvar poyangLake = ee.Geometry.Polygon([\n   [[115.82,29.40],[116.77,29.40],[116.77,28.35],[115.82,28.35]]\n]);\n\n// Add a Lake District Scope\nvar aoi = poyangLake\nMap.centerObject(aoi);\n\n// Importing Sentinel One data and filtering it\nvar s1 =  ee.ImageCollection('COPERNICUS/S1_GRD')\n.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n.filter(ee.Filter.eq('instrumentMode', 'IW'))\n.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))\n.filterBounds(aoi)\n.filterDate('2015-12-01','2021-12-01')\n.filter(ee.Filter.contains({leftField: \".geo\", rightValue: aoi})) // The filter section contains images of the study area\n.map(function(image){return image.clip(Map.getBounds(true))})\n\n// Smooth\n.map(function(image){return image.addBands(image.select('VV').focal_median(parseFloat('50'),'circle','meters').rename('VV_smoothed'))}); \nprint(s1);\n\n\n\nThe histograms of the VV bands in the Sentinel-1 radar images were calculated, and the optimal thresholds calculated using the OTSU algorithm were used to create water body masks and calculate the frequency of occurrence of water bodies.\n// Extraction of water bodies by binarization of Sentinel One data using the OSTU approach\nvar otsu = function(histogram) {\n  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));\n  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));\n  var size = means.length().get([0]);\n  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);\n  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);\n  var mean = sum.divide(total);\n  var indices = ee.List.sequence(1, size);\n  var bss = indices.map(function(i) {\n    var aCounts = counts.slice(0, 0, i);\n    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);\n    var aMeans = means.slice(0, 0, i);\n    var aMean = aMeans.multiply(aCounts)\n        .reduce(ee.Reducer.sum(), [0]).get([0])\n        .divide(aCount);\n    var bCount = total.subtract(aCount);\n    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);\n    return aCount.multiply(aMean.subtract(mean).pow(2)).add(\n           bCount.multiply(bMean.subtract(mean).pow(2)));\n  });\n  return means.sort(bss).get([-1]);\n};\n\n// Add a water body mask as a band to S1\nvar add_waterMask = function(image){\n  // Calculation of histograms\n  var histogram = image.select('VV').reduceRegion({\n    reducer: ee.Reducer.histogram(255, 2)\n      .combine('mean', null, true)\n      .combine('variance', null, true), \n    geometry: aoi, \n    scale: 10,\n    bestEffort: true\n  });\n  // Threshold via the OSTU algorithm\n  var threshold = otsu(histogram.get('VV_histogram'));\n  \n  // Acquisition of water body masks\n  var waterMask = image.select('VV_smoothed').lt(threshold).rename('waterMask');\n  waterMask = waterMask.updateMask(waterMask); \n  return image.addBands(waterMask);\n};\ns1 = s1.map(add_waterMask);\n\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n\n\n\n\n\nGenerate a water body frequency map and legend based on the calculated frequency of occurrence of water bodies and add them to the map.\n// Add study area Sentinel One median composites, water body frequency maps, and GIF maps\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n\n// Add Ribbon\nfunction ColorBar(palette) {\n  return ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0),\n    params: {\n      bbox: [0, 0, 1, 0.1],\n      dimensions: '300x15',\n      format: 'png',\n      min: 0,\n      max: 1,\n      palette: palette,\n    },\n    style: {stretch: 'horizontal', margin: '0px 22px'},\n  });\n}\nfunction makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {\n  var  labelheader = ui.Label('Water occurrence during investigation period',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});\n  var labelLines = ui.Panel(\n      [\n        ui.Label(lowLine, {margin: '-4px 21px'}),\n        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highLine, {margin: '-4px 21px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n      var labelPanel = ui.Panel(\n      [\n        ui.Label(lowText, {margin: '0px 14.5px'}),\n        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highText, {margin: '0px 1px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n    return ui.Panel({\n      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], \n      style: {position:'bottom-right'}});\n}\n\n// Add study area Sentinel One median composites, waterbody frequency maps, and color bands\nMap.add(makeLegend('|', '|', '|', \"0 %\", '50 %', '100%', ['orange','yellow','lightblue','darkblue']))\nMap.addLayer(water_frequency_masked,{min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'Percentage of annual water occurence');\nCreate the user interface panel and place it in the upper left corner of the map.\n// Defining the main panel\nvar controlPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position: 'top-left',\n    padding: '8px 15px',\n    width: '400px',\n    height: '100%',\n  }\n});\nCreate a function called displayLayers that manages the display of layers on the map.\n// First define a function to manage the layer display\nfunction displayLayers(layerToShow) {\n  // Remove all layers\n  Map.layers().reset();\n  \n  // Determine which layers to display based on the incoming parameters\n  if (layerToShow === 'frequency') {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  } else if (layerToShow === 's1') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  } else if (layerToShow === 'mask') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n    Map.addLayer(water_mask_layer, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water Mask');\n  }\n}\nInitializes the map page and determines which layers will be displayed based on parameters.\n// Initialization page, showing only the water body frequency layer\ndisplayLayers('frequency');\n\n// Updating the layer display on the map\nfunction updateLayerVisibility(showS1, showFrequency) {\n  Map.layers().reset(); // First clear all layers\n\n  // Whether or not to display the S1 layer depends on the status of the checkbox.\n  if (showS1) {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  }\n\n  // Whether or not to display the water body frequency layer is determined by the status of the checkboxes\n  if (showFrequency) {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  }\n}\n\n\n\nCreate buttons to control the display of layers, clicking on S1 Image will display the Sentinel-1 image layer, clicking on Water Frequency will display the water body frequency layer.\n// Layer options button functionality\nvar layerOptionsButton = ui.Button({\n  label: 'Layer Options',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var optionsTitle = ui.Label('Layer Options', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var optionsDescription = ui.Label('This interface allows you to customize the content of the layers displayed on the map. The following are the types of layers you can choose to display:', {fontSize: '13px', textAlign: 'center'});\n\n    // Checkbox for S1 Image layer\n    var s1Checkbox = ui.Checkbox({\n      label: 'S1 Image',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(value, waterFreqCheckbox.getValue());\n      }\n    });\n    \n    var s1image = ui.Label('shuoming', {\n      whiteSpace: 'wrap'\n    });\n    \n    // Checkbox for Water Frequency layer\n    var waterFreqCheckbox = ui.Checkbox({\n      label: 'Water Frequency',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(s1Checkbox.getValue(), value);\n      }\n    });\n    \n    var waterfre = ui.Label('The ‘Water Frequency’ layer Shows the frequency of occurrence of waterbodies during the monitoring period. This layer uses different colors to show the proportion of waterbodies occurring during the study time, helping to identify and monitor seasonal changes or long-term trends in waterbodies.', {\n      whiteSpace: 'wrap'\n    });\n\n    controlPanel.add(optionsTitle);\n    controlPanel.add(optionsDescription);\n    controlPanel.add(s1Checkbox);\n    controlPanel.add(s1image);\n    controlPanel.add(waterFreqCheckbox);\n    controlPanel.add(waterfre);\n    controlPanel.add(homeButton);\n  }\n});\n\n\n\nLayer Options\n\n\n\n\n\nNext, we create date slider, animated GIFs, defined the date range for the GIFs, and filtered the satellite data, setting parameters for the GIFs, to generate a dynamic GIF displayed on the user interface. This allows for the observation of water body changes over a period of time.\n// Initialize the date slider\nvar gifDateSlider = ui.DateSlider({\n  start: '2015-12-01',\n  end: '2021-12-01',\n  value: ['2015-12-01', '2021-12-01'],\n  period: 365,\n  onChange: updateGIF,\n  style: { width: \"95%\" }\n});\n\n// Define functions for updating GIFs\nfunction updateGIF() {\n  var range = ee.DateRange(ee.Date(gifDateSlider.getValue()[0]), ee.Date(gifDateSlider.getValue()[1]));\n  var s1Filtered = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var s1WithWaterMask = s1Filtered.map(add_waterMask);\n  var gifParams = {\n    bands: [\"VV\", \"VV\", \"VV\"],\n    region: aoi,\n    dimensions: 600,\n    framesPerSecond: 3,\n    min: -20,\n    max: 0,\n    startDate: range.start().format('YYYY-MM-dd'),\n    endDate: range.end().format('YYYY-MM-dd')\n  };\n  var gifAnimation = ui.Thumbnail({\n    image: s1WithWaterMask,\n    params: gifParams,\n    style: {\n      position: 'bottom-center',\n      maxHeight: '250px',\n      margin: '0 auto',\n    }\n  });\nTo manage and display the GIF animations, it is essential first to ensure that new GIFs are generated based on the selected time range.\n  //  Updating GIF animations with a fixed index\n  if (controlPanel.widgets().length() &gt; 3) {\n    // Make sure the GIF animation is always in the fourth position\n    controlPanel.widgets().set(3, gifAnimation);\n  } else {\n     // If there are not already four controls, insert\n     controlPanel.widgets().insert(3, gifAnimation); \n  }\n}\n\nfunction showGIFPanel() {\n  controlPanel.clear();\n\n  var gifTitle = ui.Label('Time-Lapse GIFs', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var gifDescription = ui.Label('GIF animations are created by extracting a series of images from the Sentinel-1 dataset within a chosen date range and arranging them chronologically. Use the date slider below to analyze a specific year and generate a GIF image of Poyang Lake showing the changes in the water body.', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(gifTitle);\n  controlPanel.add(gifDescription);\n  controlPanel.add(gifDateSlider);\n  // Call the update function directly to load the initial GIF.\n  updateGIF();  \n  // Ensure that the homeButton is always added last\n  controlPanel.add(homeButton);  \n}\n\n\n\nTime-Lapse GIFs\n\n\n\n\n\nThen, We’ve crafted the updateWaterDataAndChart function to set up a user interface panel dedicated to displaying water body areas. Just click on the data points of the chart triggers the map to display the corresponding satellite image and water mask for the chosen date.\nvar waterMaskDateSlider = ui.DateSlider({\n  start: '2015-12-01',\n  end: '2021-12-01',\n  value: ['2015-12-01', '2021-12-01'],\n  period: 90,\n  onChange: updateWaterDataAndChart,\n  style: { width: \"95%\" }\n});\n\n// Define functions for updating water body mask data and graphs\nfunction updateWaterDataAndChart() {\n  var range = ee.DateRange(ee.Date(waterMaskDateSlider.getValue()[0]), ee.Date(waterMaskDateSlider.getValue()[1]));\n  var filteredCollection = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var waterAreaSeries = filteredCollection.map(add_waterMask)\n      .select('waterMask')\n      .reduce(ee.Reducer.sum());\n  var waterAreaChart = ui.Chart.image.seriesByRegion({\n    imageCollection: filteredCollection.select('waterMask'),\n    regions: aoi,\n    reducer: ee.Reducer.sum(),\n    scale: 100,\n    xProperty: 'system:time_start',\n    seriesProperty: 'label'\n  }).setOptions({\n    title: 'Area of the identified water mask',\n    hAxis: {title: 'Date'},\n    vAxis: {title: 'Area (sq km)'},\n    lineWidth: 1,\n    pointSize: 3\n  });\n\n  // Use a fixed index to update the water body area charts\n  if (controlPanel.widgets().length() &gt; 3) {\n    controlPanel.widgets().set(3, waterAreaChart);\n  } else {\n    controlPanel.widgets().insert(3, waterAreaChart);  \n  }\n\n  //  Bind click events to line charts\n  waterAreaChart.onClick(function(xValue, yValue, seriesName) {\n    if (!xValue) return;\n    var equalDate = ee.Filter.equals('system:time_start', xValue);\n    var filteredImage = s1.filter(equalDate).first();\n    var classification = filteredImage.clip(aoi).select('waterMask');\n    var date_string = new Date(xValue).toLocaleString('de-DE', {dateStyle: 'full', timeStyle: 'short' });\n    var visParams = {\n      bands: ['VV'],\n      max: 0,\n      min: -20\n    };\n\n    Map.layers().reset();\n    Map.addLayer(filteredImage, visParams, 'S1-Image [' + date_string + ']');\n    Map.addLayer(classification, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water mask [' + date_string + ']');\n  });\n}\nThe following code clears the existing panel, adds a title, a description, and a date slider for selecting quarters, then updates and displays the water body area chart for Poyang Lake.\nfunction showWaterMaskPanel() {\n  controlPanel.clear();\n\n  var maskTitle = ui.Label('Water Body Area', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var maskDescription = ui.Label('Use the date slider below to analyze a given quarter. Click on the graph to show the water body area for a given day in Poyang Lake. ', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(maskTitle);\n  controlPanel.add(maskDescription);\n  controlPanel.add(waterMaskDateSlider);\n  updateWaterDataAndChart();\n  controlPanel.add(homeButton);\n}\n\n\n\nWater Body Area\n\n\n\n\n\nFinally, we configure the main panel, which includes title labels, introductions, and buttons for generating GIFs and analyzing water body areas. This setup ensures that users can dynamically explore satellite imagery, water occurrence frequency, and specific analyses through custom-designed date sliders and refresh the display to access relevant data layers or interactive animations.\n// Define a label to serve as the main title of the app interface\nvar title = ui.Label({\n  value: 'Poyang Lake Water Body Monitoring',\n  style: {\n    fontWeight: 'bold',\n    fontSize: '18px',\n    margin: '0 0 4px 0', // Define margins around the label\n    padding: '0'\n  }\n});\n\n// Create introductory label with wrapped text\nvar intro1 = ui.Label('This tool analyzes water body changes in Poyang Lake using Sentinel-1 Synthetic Aperture Radar imagery. It displays the frequency of water occurrence during investigation period. It also features interactive tools to generate time-lapse GIFs and analyze changes in water body area over time.', {\n  whiteSpace: 'wrap'\n});\n\nvar intro2 = ui.Label('To compare radar images and the frequency of water occurrence, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro3 = ui.Label('To explore the temporal changes in the water body, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro4 = ui.Label('To learn about changes in water body area, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\n// Home Page Button Configuration\nvar homeButton = ui.Button({\n  style: {stretch: 'horizontal'},\n  label: 'Home',\n  onClick: function() {\n    home();\n  }\n});\n\n// Home Panel Configuration Functions\nvar home = function() {\n  Map.setCenter(116.32, 28.89, 9);\n  Map.setOptions(\"Hybrid\");\n  controlPanel.clear();\n  controlPanel.add(title);\n  controlPanel.add(intro1);\n  controlPanel.add(intro2);\n  controlPanel.add(layerOptionsButton); \n  controlPanel.add(intro3);\n  controlPanel.add(gifButton); \n  controlPanel.add(intro4);\n  controlPanel.add(analyzeButton); \n  // When return to the home page, show only the water body frequency layer.\n  displayLayers('frequency');  \n};\n\n// Define GIF button and its function\nvar gifButton = ui.Button({\n  label: 'Time-Lapse GIFs',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var gifTitle = ui.Label('GIF', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var gifDescription = ui.Label('Select a date range to generate an animated GIF of the region.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(gifTitle);\n    controlPanel.add(gifDescription);\n    controlPanel.add(gifDateSlider);\n    // Call a function to update a GIF based on the selected date range\n    updateGIF();  \n    controlPanel.add(homeButton);\n  }\n});\n\n// Define analyse water masks button\nvar analyzeButton = ui.Button({\n  label: 'Water Body Area',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var chartTitle = ui.Label('Area of the identified water mask', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var chartDescription = ui.Label('Select a date range to generate a water body mask for the area.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(chartTitle);\n    controlPanel.add(chartDescription);\n    // Add date slider for selecting analysis date range\n    controlPanel.add(waterMaskDateSlider); \n    // Call function to update water body mask data and graphs\n    updateWaterDataAndChart();  \n    controlPanel.add(homeButton);\n  }\n});\n\n\n// Set GIF and water mask button click handlers to their respective panel showing functions\ngifButton.onClick(showGIFPanel);\nanalyzeButton.onClick(showWaterMaskPanel);\n\n// Set the home button click handler to the home function\nhomeButton.onClick(home);\n\n// Add the control panel to the map and show the home interface\nMap.add(controlPanel);\nhome();\n\n\n\n\n\nYao, J. P., Yang, L. K., Chen, T. and Song, C. Q. (2021) ‘Consecutive Monitoring of the Poyang Lake Wetland by Integrating Sentinel-2 with Sentinel-1 and Landsat 8 Data’, Remote Sensing Technology and Application, 36(4), pp. 760-776."
  },
  {
    "objectID": "index.html#project-summary",
    "href": "index.html#project-summary",
    "title": "CASA00025 Group Project - Poyang Lake Water Body Monitoring",
    "section": "",
    "text": "Influenced by monsoon rainfall and the hydrology of the Yangtze River, Poyang Lake, the largest freshwater lake and the second largest lake in China, exhibits significant seasonal water level fluctuations. Its water level even rise and fall up to more than ten metres in a few months, affecting millions of people. It is also internationally recognised as an important wetland, the home of many endangered species. Thus, against this backdrop, our application is dedicated to monitoring and managing the dynamics of Poyang Lake, which is vital to people around it, ecological conservation, disaster management and understanding environmental change.\n\n\n\n\nLocal Residents and Businesses: Provides a transparent and intuitive platform for those reliant on the lake for irrigation, fishing, and water resources, directly impacting their economic stability and quality of life.\nStudents and the Public: Serves as an educational tool to increase public awareness and interest in environmental issues. It uses interactive methods to inspire participation in lake conservation and the rational use of water resources.\nEnvironmental Advocates: Offers water level data to help monitor biodiversity, particularly endangered species, and assess the health of the ecosystem.\nPolicy Makers and Planners: Supports development of informed policies on water management and environmental protection, ensuring decisions are data-driven.\n\n\n\n\n\nSentinel-1 satellite images of the Poyang Lake region from December 1, 2015 to November 30, 2021\nData division: Spring: March-May; Summer: June-August; Autumn: September-November; Winter: December-February (next year).\nMultiview processed Sentinel IW GRD class imagery. Radar image is imaged in IW mode with VV polarization.\nReasons:\n\n\nSentienl-1’s SAR data are not constrained by weather, cloud cover, etc.\nSAR data has been identified for frequent monitoring of surface water.\nSAR specular reflectivity separates open water from land surface.\nPoyang Lake wet season: June-August, normal water season: April, May and September, dry season: October-February of the next year (Yao, et al., 2021).\n\n\n\n\n\nScreening, cropping, smoothing preprocessing of Sentinel-1 radar image.\nOptimal thresholds were obtained using histograms generated from VV polarization data and calling otsu functions.\nMark pixels smaller than the threshold as bodies of water. Make non-water bodies be considered transparent.\nCalculate sum of the number of times a water body is present at each pixel point.\nTotal number of occurrences of water bodies / Total number of images = Frequency of occurrence of water bodies per pixel point. The frequency is filtered to be higher than a set threshold, thus showing areas of frequent water bodies.\n\n\n\n\nOur application’s interface meets user needs by providing interactive tools to visualise and analyze water body changes in Poyang Lake. Users can toggle between different map layers, such as a Sentinel-1 radar composite and a water frequency map that shows the frequency of water occurrence during the monitoring period. The “Water Body Area” feature allows users to generate charts and interact with them to observe changes over time, with clickable points that update the map with corresponding images and water mask classifications. The interface also supports time-lapse GIFs, enabling users to select custom date ranges for analyzing temporal changes."
  },
  {
    "objectID": "index.html#the-application",
    "href": "index.html#the-application",
    "title": "CASA00025 Group Project - Poyang Lake Water Body Monitoring",
    "section": "",
    "text": "To view full earth engine code, please click here."
  },
  {
    "objectID": "index.html#how-it-works",
    "href": "index.html#how-it-works",
    "title": "CASA00025 Group Project - Poyang Lake Water Body Monitoring",
    "section": "",
    "text": "Define the extent of the study area, import and preprocess the Sentinel-1 satellite images, filter to obtain images with a specific polarization mode (VV polarization mode), mode of operation (interleaved observation mode), orbital attributes (ascending and intersecting orbits), the study area, and the time of day, and perform smoothing.\n// Define the geographic extent of the Poyang Lake\nvar poyangLake = ee.Geometry.Polygon([\n   [[115.82,29.40],[116.77,29.40],[116.77,28.35],[115.82,28.35]]\n]);\n\n// Add a Lake District Scope\nvar aoi = poyangLake\nMap.centerObject(aoi);\n\n// Importing Sentinel One data and filtering it\nvar s1 =  ee.ImageCollection('COPERNICUS/S1_GRD')\n.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))\n.filter(ee.Filter.eq('instrumentMode', 'IW'))\n.filter(ee.Filter.eq('orbitProperties_pass', 'ASCENDING'))\n.filterBounds(aoi)\n.filterDate('2015-12-01','2021-12-01')\n.filter(ee.Filter.contains({leftField: \".geo\", rightValue: aoi})) // The filter section contains images of the study area\n.map(function(image){return image.clip(Map.getBounds(true))})\n\n// Smooth\n.map(function(image){return image.addBands(image.select('VV').focal_median(parseFloat('50'),'circle','meters').rename('VV_smoothed'))}); \nprint(s1);\n\n\n\nThe histograms of the VV bands in the Sentinel-1 radar images were calculated, and the optimal thresholds calculated using the OTSU algorithm were used to create water body masks and calculate the frequency of occurrence of water bodies.\n// Extraction of water bodies by binarization of Sentinel One data using the OSTU approach\nvar otsu = function(histogram) {\n  var counts = ee.Array(ee.Dictionary(histogram).get('histogram'));\n  var means = ee.Array(ee.Dictionary(histogram).get('bucketMeans'));\n  var size = means.length().get([0]);\n  var total = counts.reduce(ee.Reducer.sum(), [0]).get([0]);\n  var sum = means.multiply(counts).reduce(ee.Reducer.sum(), [0]).get([0]);\n  var mean = sum.divide(total);\n  var indices = ee.List.sequence(1, size);\n  var bss = indices.map(function(i) {\n    var aCounts = counts.slice(0, 0, i);\n    var aCount = aCounts.reduce(ee.Reducer.sum(), [0]).get([0]);\n    var aMeans = means.slice(0, 0, i);\n    var aMean = aMeans.multiply(aCounts)\n        .reduce(ee.Reducer.sum(), [0]).get([0])\n        .divide(aCount);\n    var bCount = total.subtract(aCount);\n    var bMean = sum.subtract(aCount.multiply(aMean)).divide(bCount);\n    return aCount.multiply(aMean.subtract(mean).pow(2)).add(\n           bCount.multiply(bMean.subtract(mean).pow(2)));\n  });\n  return means.sort(bss).get([-1]);\n};\n\n// Add a water body mask as a band to S1\nvar add_waterMask = function(image){\n  // Calculation of histograms\n  var histogram = image.select('VV').reduceRegion({\n    reducer: ee.Reducer.histogram(255, 2)\n      .combine('mean', null, true)\n      .combine('variance', null, true), \n    geometry: aoi, \n    scale: 10,\n    bestEffort: true\n  });\n  // Threshold via the OSTU algorithm\n  var threshold = otsu(histogram.get('VV_histogram'));\n  \n  // Acquisition of water body masks\n  var waterMask = image.select('VV_smoothed').lt(threshold).rename('waterMask');\n  waterMask = waterMask.updateMask(waterMask); \n  return image.addBands(waterMask);\n};\ns1 = s1.map(add_waterMask);\n\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n\n\n\n\n\nGenerate a water body frequency map and legend based on the calculated frequency of occurrence of water bodies and add them to the map.\n// Add study area Sentinel One median composites, water body frequency maps, and GIF maps\n// Calculate the frequency of occurrence of water bodies during the experiment\nvar min_occurence = 10;\nvar water_sum = s1.select('waterMask').reduce(ee.Reducer.sum());\nvar water_frequency = water_sum.divide(s1.select('waterMask').size()).multiply(100);\nvar water_frequency_masked = water_frequency.updateMask(water_frequency.gt(min_occurence));\n\n// Add Ribbon\nfunction ColorBar(palette) {\n  return ui.Thumbnail({\n    image: ee.Image.pixelLonLat().select(0),\n    params: {\n      bbox: [0, 0, 1, 0.1],\n      dimensions: '300x15',\n      format: 'png',\n      min: 0,\n      max: 1,\n      palette: palette,\n    },\n    style: {stretch: 'horizontal', margin: '0px 22px'},\n  });\n}\nfunction makeLegend(lowLine, midLine, highLine,lowText, midText, highText, palette) {\n  var  labelheader = ui.Label('Water occurrence during investigation period',{margin: '5px 17px', textAlign: 'center', stretch: 'horizontal', fontWeight: 'bold'});\n  var labelLines = ui.Panel(\n      [\n        ui.Label(lowLine, {margin: '-4px 21px'}),\n        ui.Label(midLine, {margin: '-4px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highLine, {margin: '-4px 21px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n      var labelPanel = ui.Panel(\n      [\n        ui.Label(lowText, {margin: '0px 14.5px'}),\n        ui.Label(midText, {margin: '0px 0px', textAlign: 'center', stretch: 'horizontal'}),\n        ui.Label(highText, {margin: '0px 1px'})\n],\n      ui.Panel.Layout.flow('horizontal'));\n    return ui.Panel({\n      widgets: [labelheader, ColorBar(palette), labelLines, labelPanel], \n      style: {position:'bottom-right'}});\n}\n\n// Add study area Sentinel One median composites, waterbody frequency maps, and color bands\nMap.add(makeLegend('|', '|', '|', \"0 %\", '50 %', '100%', ['orange','yellow','lightblue','darkblue']))\nMap.addLayer(water_frequency_masked,{min:min_occurence,max:100,palette:['orange','yellow','lightblue','darkblue']},'Percentage of annual water occurence');\nCreate the user interface panel and place it in the upper left corner of the map.\n// Defining the main panel\nvar controlPanel = ui.Panel({\n  layout: ui.Panel.Layout.flow('vertical'),\n  style: {\n    position: 'top-left',\n    padding: '8px 15px',\n    width: '400px',\n    height: '100%',\n  }\n});\nCreate a function called displayLayers that manages the display of layers on the map.\n// First define a function to manage the layer display\nfunction displayLayers(layerToShow) {\n  // Remove all layers\n  Map.layers().reset();\n  \n  // Determine which layers to display based on the incoming parameters\n  if (layerToShow === 'frequency') {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  } else if (layerToShow === 's1') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  } else if (layerToShow === 'mask') {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n    Map.addLayer(water_mask_layer, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water Mask');\n  }\n}\nInitializes the map page and determines which layers will be displayed based on parameters.\n// Initialization page, showing only the water body frequency layer\ndisplayLayers('frequency');\n\n// Updating the layer display on the map\nfunction updateLayerVisibility(showS1, showFrequency) {\n  Map.layers().reset(); // First clear all layers\n\n  // Whether or not to display the S1 layer depends on the status of the checkbox.\n  if (showS1) {\n    Map.addLayer(s1.median(), {bands: ['VV', 'VV', 'VV'], min: -20, max: 0}, 'S1 Image');\n  }\n\n  // Whether or not to display the water body frequency layer is determined by the status of the checkboxes\n  if (showFrequency) {\n    Map.addLayer(water_frequency_masked, {min: min_occurence, max: 100, palette: ['orange', 'yellow', 'lightblue', 'darkblue']}, 'Water Frequency');\n  }\n}\n\n\n\nCreate buttons to control the display of layers, clicking on S1 Image will display the Sentinel-1 image layer, clicking on Water Frequency will display the water body frequency layer.\n// Layer options button functionality\nvar layerOptionsButton = ui.Button({\n  label: 'Layer Options',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var optionsTitle = ui.Label('Layer Options', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var optionsDescription = ui.Label('This interface allows you to customize the content of the layers displayed on the map. The following are the types of layers you can choose to display:', {fontSize: '13px', textAlign: 'center'});\n\n    // Checkbox for S1 Image layer\n    var s1Checkbox = ui.Checkbox({\n      label: 'S1 Image',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(value, waterFreqCheckbox.getValue());\n      }\n    });\n    \n    var s1image = ui.Label('shuoming', {\n      whiteSpace: 'wrap'\n    });\n    \n    // Checkbox for Water Frequency layer\n    var waterFreqCheckbox = ui.Checkbox({\n      label: 'Water Frequency',\n      value: false,\n      style: {\n         fontWeight: 'bold'\n      },\n      onChange: function(value) {\n        updateLayerVisibility(s1Checkbox.getValue(), value);\n      }\n    });\n    \n    var waterfre = ui.Label('The ‘Water Frequency’ layer Shows the frequency of occurrence of waterbodies during the monitoring period. This layer uses different colors to show the proportion of waterbodies occurring during the study time, helping to identify and monitor seasonal changes or long-term trends in waterbodies.', {\n      whiteSpace: 'wrap'\n    });\n\n    controlPanel.add(optionsTitle);\n    controlPanel.add(optionsDescription);\n    controlPanel.add(s1Checkbox);\n    controlPanel.add(s1image);\n    controlPanel.add(waterFreqCheckbox);\n    controlPanel.add(waterfre);\n    controlPanel.add(homeButton);\n  }\n});\n\n\n\nLayer Options\n\n\n\n\n\nNext, we create date slider, animated GIFs, defined the date range for the GIFs, and filtered the satellite data, setting parameters for the GIFs, to generate a dynamic GIF displayed on the user interface. This allows for the observation of water body changes over a period of time.\n// Initialize the date slider\nvar gifDateSlider = ui.DateSlider({\n  start: '2015-12-01',\n  end: '2021-12-01',\n  value: ['2015-12-01', '2021-12-01'],\n  period: 365,\n  onChange: updateGIF,\n  style: { width: \"95%\" }\n});\n\n// Define functions for updating GIFs\nfunction updateGIF() {\n  var range = ee.DateRange(ee.Date(gifDateSlider.getValue()[0]), ee.Date(gifDateSlider.getValue()[1]));\n  var s1Filtered = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var s1WithWaterMask = s1Filtered.map(add_waterMask);\n  var gifParams = {\n    bands: [\"VV\", \"VV\", \"VV\"],\n    region: aoi,\n    dimensions: 600,\n    framesPerSecond: 3,\n    min: -20,\n    max: 0,\n    startDate: range.start().format('YYYY-MM-dd'),\n    endDate: range.end().format('YYYY-MM-dd')\n  };\n  var gifAnimation = ui.Thumbnail({\n    image: s1WithWaterMask,\n    params: gifParams,\n    style: {\n      position: 'bottom-center',\n      maxHeight: '250px',\n      margin: '0 auto',\n    }\n  });\nTo manage and display the GIF animations, it is essential first to ensure that new GIFs are generated based on the selected time range.\n  //  Updating GIF animations with a fixed index\n  if (controlPanel.widgets().length() &gt; 3) {\n    // Make sure the GIF animation is always in the fourth position\n    controlPanel.widgets().set(3, gifAnimation);\n  } else {\n     // If there are not already four controls, insert\n     controlPanel.widgets().insert(3, gifAnimation); \n  }\n}\n\nfunction showGIFPanel() {\n  controlPanel.clear();\n\n  var gifTitle = ui.Label('Time-Lapse GIFs', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var gifDescription = ui.Label('GIF animations are created by extracting a series of images from the Sentinel-1 dataset within a chosen date range and arranging them chronologically. Use the date slider below to analyze a specific year and generate a GIF image of Poyang Lake showing the changes in the water body.', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(gifTitle);\n  controlPanel.add(gifDescription);\n  controlPanel.add(gifDateSlider);\n  // Call the update function directly to load the initial GIF.\n  updateGIF();  \n  // Ensure that the homeButton is always added last\n  controlPanel.add(homeButton);  \n}\n\n\n\nTime-Lapse GIFs\n\n\n\n\n\nThen, We’ve crafted the updateWaterDataAndChart function to set up a user interface panel dedicated to displaying water body areas. Just click on the data points of the chart triggers the map to display the corresponding satellite image and water mask for the chosen date.\nvar waterMaskDateSlider = ui.DateSlider({\n  start: '2015-12-01',\n  end: '2021-12-01',\n  value: ['2015-12-01', '2021-12-01'],\n  period: 90,\n  onChange: updateWaterDataAndChart,\n  style: { width: \"95%\" }\n});\n\n// Define functions for updating water body mask data and graphs\nfunction updateWaterDataAndChart() {\n  var range = ee.DateRange(ee.Date(waterMaskDateSlider.getValue()[0]), ee.Date(waterMaskDateSlider.getValue()[1]));\n  var filteredCollection = s1.filterDate(range.start(), range.end()).filterBounds(aoi);\n  var waterAreaSeries = filteredCollection.map(add_waterMask)\n      .select('waterMask')\n      .reduce(ee.Reducer.sum());\n  var waterAreaChart = ui.Chart.image.seriesByRegion({\n    imageCollection: filteredCollection.select('waterMask'),\n    regions: aoi,\n    reducer: ee.Reducer.sum(),\n    scale: 100,\n    xProperty: 'system:time_start',\n    seriesProperty: 'label'\n  }).setOptions({\n    title: 'Area of the identified water mask',\n    hAxis: {title: 'Date'},\n    vAxis: {title: 'Area (sq km)'},\n    lineWidth: 1,\n    pointSize: 3\n  });\n\n  // Use a fixed index to update the water body area charts\n  if (controlPanel.widgets().length() &gt; 3) {\n    controlPanel.widgets().set(3, waterAreaChart);\n  } else {\n    controlPanel.widgets().insert(3, waterAreaChart);  \n  }\n\n  //  Bind click events to line charts\n  waterAreaChart.onClick(function(xValue, yValue, seriesName) {\n    if (!xValue) return;\n    var equalDate = ee.Filter.equals('system:time_start', xValue);\n    var filteredImage = s1.filter(equalDate).first();\n    var classification = filteredImage.clip(aoi).select('waterMask');\n    var date_string = new Date(xValue).toLocaleString('de-DE', {dateStyle: 'full', timeStyle: 'short' });\n    var visParams = {\n      bands: ['VV'],\n      max: 0,\n      min: -20\n    };\n\n    Map.layers().reset();\n    Map.addLayer(filteredImage, visParams, 'S1-Image [' + date_string + ']');\n    Map.addLayer(classification, {min: 0, max: 1, palette: ['#FFFFFF', '#0000FF']}, 'Water mask [' + date_string + ']');\n  });\n}\nThe following code clears the existing panel, adds a title, a description, and a date slider for selecting quarters, then updates and displays the water body area chart for Poyang Lake.\nfunction showWaterMaskPanel() {\n  controlPanel.clear();\n\n  var maskTitle = ui.Label('Water Body Area', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n  var maskDescription = ui.Label('Use the date slider below to analyze a given quarter. Click on the graph to show the water body area for a given day in Poyang Lake. ', {fontSize: '13px', textAlign: 'left'});\n\n  controlPanel.add(maskTitle);\n  controlPanel.add(maskDescription);\n  controlPanel.add(waterMaskDateSlider);\n  updateWaterDataAndChart();\n  controlPanel.add(homeButton);\n}\n\n\n\nWater Body Area\n\n\n\n\n\nFinally, we configure the main panel, which includes title labels, introductions, and buttons for generating GIFs and analyzing water body areas. This setup ensures that users can dynamically explore satellite imagery, water occurrence frequency, and specific analyses through custom-designed date sliders and refresh the display to access relevant data layers or interactive animations.\n// Define a label to serve as the main title of the app interface\nvar title = ui.Label({\n  value: 'Poyang Lake Water Body Monitoring',\n  style: {\n    fontWeight: 'bold',\n    fontSize: '18px',\n    margin: '0 0 4px 0', // Define margins around the label\n    padding: '0'\n  }\n});\n\n// Create introductory label with wrapped text\nvar intro1 = ui.Label('This tool analyzes water body changes in Poyang Lake using Sentinel-1 Synthetic Aperture Radar imagery. It displays the frequency of water occurrence during investigation period. It also features interactive tools to generate time-lapse GIFs and analyze changes in water body area over time.', {\n  whiteSpace: 'wrap'\n});\n\nvar intro2 = ui.Label('To compare radar images and the frequency of water occurrence, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro3 = ui.Label('To explore the temporal changes in the water body, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\nvar intro4 = ui.Label('To learn about changes in water body area, click the button below:', {\n  whiteSpace: 'wrap'\n});\n\n// Home Page Button Configuration\nvar homeButton = ui.Button({\n  style: {stretch: 'horizontal'},\n  label: 'Home',\n  onClick: function() {\n    home();\n  }\n});\n\n// Home Panel Configuration Functions\nvar home = function() {\n  Map.setCenter(116.32, 28.89, 9);\n  Map.setOptions(\"Hybrid\");\n  controlPanel.clear();\n  controlPanel.add(title);\n  controlPanel.add(intro1);\n  controlPanel.add(intro2);\n  controlPanel.add(layerOptionsButton); \n  controlPanel.add(intro3);\n  controlPanel.add(gifButton); \n  controlPanel.add(intro4);\n  controlPanel.add(analyzeButton); \n  // When return to the home page, show only the water body frequency layer.\n  displayLayers('frequency');  \n};\n\n// Define GIF button and its function\nvar gifButton = ui.Button({\n  label: 'Time-Lapse GIFs',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var gifTitle = ui.Label('GIF', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var gifDescription = ui.Label('Select a date range to generate an animated GIF of the region.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(gifTitle);\n    controlPanel.add(gifDescription);\n    controlPanel.add(gifDateSlider);\n    // Call a function to update a GIF based on the selected date range\n    updateGIF();  \n    controlPanel.add(homeButton);\n  }\n});\n\n// Define analyse water masks button\nvar analyzeButton = ui.Button({\n  label: 'Water Body Area',\n  style: {\n    fontSize: '16px',\n    padding: '10px',\n    margin: '10px auto',\n    width: '100%', \n    stretch: 'horizontal'\n  },\n  onClick: function() {\n    controlPanel.clear();\n    var chartTitle = ui.Label('Area of the identified water mask', {fontWeight: 'bold', fontSize: '18px', textAlign: 'center'});\n    var chartDescription = ui.Label('Select a date range to generate a water body mask for the area.', {fontSize: '13px', textAlign: 'center'});\n    controlPanel.add(chartTitle);\n    controlPanel.add(chartDescription);\n    // Add date slider for selecting analysis date range\n    controlPanel.add(waterMaskDateSlider); \n    // Call function to update water body mask data and graphs\n    updateWaterDataAndChart();  \n    controlPanel.add(homeButton);\n  }\n});\n\n\n// Set GIF and water mask button click handlers to their respective panel showing functions\ngifButton.onClick(showGIFPanel);\nanalyzeButton.onClick(showWaterMaskPanel);\n\n// Set the home button click handler to the home function\nhomeButton.onClick(home);\n\n// Add the control panel to the map and show the home interface\nMap.add(controlPanel);\nhome();"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "",
    "section": "",
    "text": "Use this repository to host a website for your CASA0025 final project by following these stpes:\n\nclone this repository\ninstall quarto\nedit the ‘index.qmd’ file with the contents of your project\nusing terminal, navigate to the project directory and run “quarto render”\npush the changes to your github repository\non github, navigate to Settings&gt;Pages&gt;Build and Deployment. Make sure that under “Source” it says “deploy from branch”. Under “Branch”, select “Main” in the first dropdown and “Docs” under the second drop down. Then press “Save”\n\nYour website should now be available under https://{your_username}.github.io/{your_repo_name}"
  },
  {
    "objectID": "index.html#reference",
    "href": "index.html#reference",
    "title": "CASA00025 Group Project - Poyang Lake Water Body Monitoring",
    "section": "",
    "text": "Yao, J. P., Yang, L. K., Chen, T. and Song, C. Q. (2021) ‘Consecutive Monitoring of the Poyang Lake Wetland by Integrating Sentinel-2 with Sentinel-1 and Landsat 8 Data’, Remote Sensing Technology and Application, 36(4), pp. 760-776."
  }
]